import React, { useState } from "react";
import axios from "axios";
import { useGeoData } from "../../../contexts/GeoDataContext";
import config from "../../../../config";
import { toast } from "react-toastify";
import { ClipLoader } from 'react-spinners';

const CapNhatDuLieu = () => {
  const [isForecastOpen, setIsForecastOpen] = useState(true);
  const { updateLayerData, setLayerLoading, mapLayers } = useGeoData();

  // H√†m load d·ªØ li·ªáu cho t·ª´ng layer v·ªõi debug t·ªët h∆°n
  const handleLoadLayer = async (layerKey, layerName) => {
    try {
      const layer = mapLayers[layerKey];
      if (!layer) {
        console.error(`Layer ${layerKey} kh√¥ng t·ªìn t·∫°i`);
        return;
      }

      setLayerLoading(layerKey, true);
      console.log(`üîÑ ƒêang t·∫£i d·ªØ li·ªáu cho layer: ${layerName}`);
      
      const url = `${config.API_URL}/api/layer-data/${layer.endpoint}`;
      console.log(`üì° Request URL: ${url}`);
      
      const response = await axios.get(url);
      
      console.log(`üìä Response status: ${response.status}`);
      console.log(`üìä Response data:`, response.data);
      
      if (response.data && response.data.features) {
        const layerData = {
          ...response.data,
          layerType: layerKey
        };
        
        console.log(`‚úÖ Layer data structure:`, {
          type: layerData.type,
          featuresCount: layerData.features.length,
          sampleFeature: layerData.features[0]
        });
        
        updateLayerData(layerKey, layerData);
        
        // Th√¥ng b√°o chi ti·∫øt cho t·ª´ng lo·∫°i layer
        let successMessage = `‚úÖ ƒê√£ t·∫£i ${layerName} th√†nh c√¥ng! (${response.data.features.length} ƒë·ªëi t∆∞·ª£ng)`;
        
        // Th√¥ng b√°o ƒë·∫∑c bi·ªát cho t·ª´ng layer
        if (layerKey === 'forestManagement') {
          const managementTypes = {};
          response.data.features.forEach(feature => {
            const chuQuanLy = feature.properties.chuquanly || "Kh√¥ng x√°c ƒë·ªãnh";
            managementTypes[chuQuanLy] = (managementTypes[chuQuanLy] || 0) + 1;
          });
          console.log(`üè¢ C√°c lo·∫°i ch·ªß qu·∫£n l√Ω:`, managementTypes);
          successMessage += `\nüè¢ G·ªìm ${Object.keys(managementTypes).length} lo·∫°i ch·ªß qu·∫£n l√Ω kh√°c nhau`;
        }
        
        if (layerKey === 'terrain') {
          const polygonCount = response.data.features.filter(f => f.properties.layer_type === 'terrain_polygon').length;
          const lineCount = response.data.features.filter(f => f.properties.layer_type === 'terrain_line').length;
          successMessage += `\nüèîÔ∏è G·ªìm ${polygonCount} v√πng v√† ${lineCount} ƒë∆∞·ªùng`;
        }

        if (layerKey === 'forestTypes') {
          const typeStats = {};
          response.data.features.forEach(feature => {
            const type = feature.properties.forest_function || "Kh√¥ng x√°c ƒë·ªãnh";
            typeStats[type] = (typeStats[type] || 0) + 1;
          });
          console.log(`üå≤ Th·ªëng k√™ 3 lo·∫°i r·ª´ng:`, typeStats);
          successMessage += `\nüå≤ G·ªìm ${Object.keys(typeStats).length} lo·∫°i r·ª´ng`;
        }
        
        toast.success(successMessage);
        console.log(`‚úÖ ƒê√£ t·∫£i ${response.data.features.length} features cho ${layerName}`);
        
        // Th√¥ng b√°o ƒëang zoom
        toast.info(`üó∫Ô∏è ƒêang zoom ƒë·∫øn v√πng ${layerName}...`);
      } else {
        console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu features trong response cho ${layerName}`);
        toast.warning(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho ${layerName}`);
      }
    } catch (err) {
      console.error(`‚ùå L·ªói khi t·∫£i ${layerName}:`, err);
      
      // Log chi ti·∫øt l·ªói
      if (err.response) {
        console.error(`üì° Response error:`, {
          status: err.response.status,
          statusText: err.response.statusText,
          data: err.response.data
        });
      }
      
      let errorMessage = `‚ùå Kh√¥ng th·ªÉ t·∫£i ${layerName}`;
      if (err.response?.status === 404) {
        errorMessage += ": Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu";
      } else if (err.response?.status === 500) {
        errorMessage += ": L·ªói server";
      } else {
        errorMessage += `: ${err.response?.data?.error || err.message}`;
      }
      
      toast.error(errorMessage);
      setLayerLoading(layerKey, false);
    }
  };

  // H√†m load t·∫•t c·∫£ layers c∆° b·∫£n c√πng l√∫c
  const handleLoadAllBasicLayers = async () => {
    const basicLayers = [
      { key: 'administrative', name: 'Ranh gi·ªõi h√†nh ch√≠nh' },
      { key: 'forestTypes', name: '3 lo·∫°i r·ª´ng' },
      { key: 'forestManagement', name: 'Ch·ªß qu·∫£n l√Ω r·ª´ng' }
    ];
    
    toast.info("üîÑ ƒêang t·∫£i t·∫•t c·∫£ c√°c l·ªõp c∆° b·∫£n...");
    
    const loadPromises = basicLayers.map(({ key, name }) => 
      handleLoadLayer(key, name).catch(err => {
        console.error(`L·ªói t·∫£i ${name}:`, err);
        return { error: err, layerKey: key };
      })
    );
    
    try {
      const results = await Promise.allSettled(loadPromises);
      
      const successCount = results.filter(result => result.status === 'fulfilled').length;
      const failCount = results.length - successCount;
      
      if (failCount === 0) {
        toast.success("‚úÖ ƒê√£ t·∫£i xong t·∫•t c·∫£ c√°c l·ªõp c∆° b·∫£n!");
      } else {
        toast.warning(`‚ö†Ô∏è ƒê√£ t·∫£i xong ${successCount}/${results.length} l·ªõp. ${failCount} l·ªõp g·∫∑p l·ªói.`);
      }
    } catch (err) {
      console.error("‚ùå L·ªói t·ªïng qu√°t khi t·∫£i layers:", err);
      toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i m·ªôt s·ªë l·ªõp");
    }
  };

  // H√†m load l·ªõp n√¢ng cao (ch·ªâ c√≥ terrain)
  const handleLoadAdvancedLayer = async () => {
    await handleLoadLayer('terrain', 'N·ªÅn ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng');
  };

  return (
    <div>
      <div
        className="bg-forest-green-primary text-white py-0.2 px-4 rounded-full text-sm font-medium uppercase tracking-wide text-left shadow-md w-full cursor-pointer"
        onClick={() => setIsForecastOpen(!isForecastOpen)}
      >
        C·∫≠p nh·∫≠t d·ªØ li·ªáu
      </div>

      {isForecastOpen && (
        <div className="flex flex-col gap-2 px-1 pt-3">
          <div className="flex flex-col gap-3">
            
            {/* N√∫t t·∫£i nhanh */}
            <div className="mb-3 p-2 bg-green-50 rounded border border-green-200">
              <h4 className="text-sm font-semibold text-green-800 mb-2">T·∫£i nhanh</h4>
              <div className="flex gap-2">
                <button 
                  onClick={handleLoadAllBasicLayers}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white font-medium py-1 px-2 rounded text-xs transition-colors"
                >
                  T·∫£i l·ªõp c∆° b·∫£n
                </button>
                <button 
                  onClick={handleLoadAdvancedLayer}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-1 px-2 rounded text-xs transition-colors"
                >
                  T·∫£i l·ªõp n√¢ng cao
                </button>
              </div>
            </div>

            {/* 1. L·ªõp ranh gi·ªõi h√†nh ch√≠nh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-full">L·ªõp ranh gi·ªõi h√†nh ch√≠nh</label>
              <button 
                onClick={() => handleLoadLayer('administrative', 'Ranh gi·ªõi h√†nh ch√≠nh')}
                disabled={mapLayers.administrative.loading}
                className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
              >
                {mapLayers.administrative.loading ? (
                  <>
                    <ClipLoader color="#333" size={14} />
                    <span className="ml-1">ƒêang t·∫£i...</span>
                  </>
                ) : (
                  "T·∫£i l√™n"
                )}
              </button>
            </div>

            {/* 2. L·ªõp 3 lo·∫°i r·ª´ng */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-full">L·ªõp 3 lo·∫°i r·ª´ng</label>
              <button 
                onClick={() => handleLoadLayer('forestTypes', '3 lo·∫°i r·ª´ng')}
                disabled={mapLayers.forestTypes.loading}
                className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
              >
                {mapLayers.forestTypes.loading ? (
                  <>
                    <ClipLoader color="#333" size={14} />
                    <span className="ml-1">ƒêang t·∫£i...</span>
                  </>
                ) : (
                  "T·∫£i l√™n"
                )}
              </button>
            </div>

            {/* 3. L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-full">L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng</label>
              <button 
                onClick={() => handleLoadLayer('forestManagement', 'Ch·ªß qu·∫£n l√Ω r·ª´ng')}
                disabled={mapLayers.forestManagement.loading}
                className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
              >
                {mapLayers.forestManagement.loading ? (
                  <>
                    <ClipLoader color="#333" size={14} />
                    <span className="ml-1">ƒêang t·∫£i...</span>
                  </>
                ) : (
                  "T·∫£i l√™n"
                )}
              </button>
            </div>

            {/* 4. L·ªõp n·ªÅn ƒë·ªãa h√¨nh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-full">L·ªõp n·ªÅn ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng</label>
              <button 
                onClick={() => handleLoadLayer('terrain', 'N·ªÅn ƒë·ªãa h√¨nh')}
                disabled={mapLayers.terrain.loading}
                className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
              >
                {mapLayers.terrain.loading ? (
                  <>
                    <ClipLoader color="#333" size={14} />
                    <span className="ml-1">ƒêang t·∫£i...</span>
                  </>
                ) : (
                  "T·∫£i l√™n"
                )}
              </button>
            </div>

            {/* Th√¥ng tin tr·∫°ng th√°i */}
            <div className="mt-4 p-3 bg-gray-50 rounded-md">
              <h4 className="text-sm font-medium mb-2">Tr·∫°ng th√°i c√°c l·ªõp:</h4>
              <div className="grid grid-cols-2 gap-2 text-xs">
                {Object.entries(mapLayers).map(([key, layer]) => (
                  <div key={key} className="flex items-center gap-2">
                    <div 
                      className={`w-3 h-3 rounded-full ${
                        layer.loading ? 'bg-yellow-500' : 
                        layer.data ? 'bg-green-500' : 'bg-gray-300'
                      }`}
                    ></div>
                    <span className={`${layer.visible ? 'font-medium' : 'opacity-60'}`}>
                      {layer.name}
                      {/* Th√™m icon ƒë·∫∑c bi·ªát */}
                      {key === 'forestManagement' && ' üè¢'}
                      {key === 'administrative' && ' üèõÔ∏è'}
                      {key === 'forestTypes' && ' üå≤'}
                      {key === 'terrain' && ' üèîÔ∏è'}
                      {key === 'deforestationAlerts' && ' ‚ö†Ô∏è'}
                    </span>
                    {layer.data && (
                      <span className="text-gray-500">
                        ({layer.data.features?.length || 0})
                      </span>
                    )}
                  </div>
                ))}
              </div>
              
              {/* Th·ªëng k√™ t·ªïng h·ª£p */}
              <div className="mt-2 p-2 bg-blue-50 rounded text-xs">
                <div className="flex justify-between">
                  <span><strong>ƒê√£ t·∫£i:</strong> {Object.values(mapLayers).filter(layer => layer.data).length} l·ªõp</span>
                  <span><strong>Hi·ªÉn th·ªã:</strong> {Object.values(mapLayers).filter(layer => layer.data && layer.visible).length} l·ªõp</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CapNhatDuLieu;