// client/src/dashboard/components/sidebars/quanlydulieu/CapNhatDuLieu.jsx
import React, { useState } from "react";
import axios from "axios";
import { useGeoData } from "../../../contexts/GeoDataContext";
import config from "../../../../config";
import { toast } from "react-toastify";
import { ClipLoader } from 'react-spinners';
import EnhancedLoadingComponent from '../../EnhancedLoadingComponent';

const CapNhatDuLieu = () => {
  const [isForecastOpen, setIsForecastOpen] = useState(true);
  const { updateLayerData, setLayerLoading, mapLayers } = useGeoData();
  
  // Enhanced loading states
  const [globalLoading, setGlobalLoading] = useState(false);
  const [loadingStage, setLoadingStage] = useState('');
  const [loadedLayers, setLoadedLayers] = useState(0);
  const [totalLayers, setTotalLayers] = useState(0);

  // H√†m load d·ªØ li·ªáu cho t·ª´ng layer v·ªõi enhanced loading
  const handleLoadLayer = async (layerKey, layerName) => {
    try {
      const layer = mapLayers[layerKey];
      if (!layer) {
        console.error(`Layer ${layerKey} kh√¥ng t·ªìn t·∫°i`);
        return;
      }

      setLayerLoading(layerKey, true);
      setLoadingStage('counting');
      console.log(`üîÑ ƒêang t·∫£i TO√ÄN B·ªò d·ªØ li·ªáu cho layer: ${layerName}`);
      
      const url = `${config.API_URL}/api/layer-data/${layer.endpoint}`;
      console.log(`üì° Request URL: ${url}`);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o b·∫Øt ƒë·∫ßu t·∫£i
      toast.info(`üîÑ B·∫Øt ƒë·∫ßu t·∫£i to√†n b·ªô d·ªØ li·ªáu ${layerName}...`, { autoClose: 2000 });
      
      setLoadingStage('loading');
      const startTime = Date.now();
      
      const response = await axios.get(url);
      
      const loadTime = ((Date.now() - startTime) / 1000).toFixed(1);
      console.log(`üìä Response status: ${response.status} (${loadTime}s)`);
      console.log(`üìä Response data:`, response.data);
      
      if (response.data && response.data.features) {
        setLoadingStage('processing');
        
        const layerData = {
          ...response.data,
          layerType: layerKey
        };
        
        console.log(`‚úÖ Layer data structure:`, {
          type: layerData.type,
          featuresCount: layerData.features.length,
          sampleFeature: layerData.features[0],
          loadTime: `${loadTime}s`
        });
        
        setLoadingStage('rendering');
        updateLayerData(layerKey, layerData);
        
        // Th√¥ng b√°o chi ti·∫øt cho t·ª´ng lo·∫°i layer
        let successMessage = `‚úÖ ƒê√£ t·∫£i TO√ÄN B·ªò ${layerName} th√†nh c√¥ng!\nüìä ${response.data.features.length} ƒë·ªëi t∆∞·ª£ng (${loadTime}s)`;
        
        // Th√¥ng b√°o ƒë·∫∑c bi·ªát cho t·ª´ng layer
        if (layerKey === 'forestManagement') {
          const managementTypes = {};
          response.data.features.forEach(feature => {
            const chuQuanLy = feature.properties.chuquanly || "Kh√¥ng x√°c ƒë·ªãnh";
            managementTypes[chuQuanLy] = (managementTypes[chuQuanLy] || 0) + 1;
          });
          console.log(`üè¢ C√°c lo·∫°i ch·ªß qu·∫£n l√Ω:`, managementTypes);
          successMessage += `\nüè¢ Bao g·ªìm ${Object.keys(managementTypes).length} lo·∫°i ch·ªß qu·∫£n l√Ω kh√°c nhau`;
        }
        
        if (layerKey === 'terrain') {
          const polygonCount = response.data.features.filter(f => f.properties.layer_type === 'terrain_polygon').length;
          const lineCount = response.data.features.filter(f => f.properties.layer_type === 'terrain_line').length;
          successMessage += `\nüèîÔ∏è G·ªìm ${polygonCount} v√πng ƒë·ªãa h√¨nh v√† ${lineCount} ƒë∆∞·ªùng ƒë·ªãa h√¨nh`;
        }

        if (layerKey === 'forestTypes') {
          const typeStats = {};
          response.data.features.forEach(feature => {
            const type = feature.properties.forest_function || "Kh√¥ng x√°c ƒë·ªãnh";
            typeStats[type] = (typeStats[type] || 0) + 1;
          });
          console.log(`üå≤ Th·ªëng k√™ c√°c lo·∫°i r·ª´ng (theo LDLR):`, typeStats);
          successMessage += `\nüå≤ Bao g·ªìm ${Object.keys(typeStats).length} lo·∫°i r·ª´ng theo ph√¢n lo·∫°i LDLR`;
        }

        if (layerKey === 'administrative') {
          const boundaryStats = {};
          response.data.features.forEach(feature => {
            const level = feature.properties.boundary_level || "unknown";
            boundaryStats[level] = (boundaryStats[level] || 0) + 1;
          });
          console.log(`üèõÔ∏è Th·ªëng k√™ ranh gi·ªõi:`, boundaryStats);
          successMessage += `\nüèõÔ∏è Bao g·ªìm ${Object.keys(boundaryStats).length} c·∫•p ranh gi·ªõi kh√°c nhau`;
        }

        if (layerKey === 'deforestationAlerts') {
          const alertStats = {};
          response.data.features.forEach(feature => {
            const level = feature.properties.alert_level || "Kh√¥ng x√°c ƒë·ªãnh";
            alertStats[level] = (alertStats[level] || 0) + 1;
          });
          console.log(`‚ö†Ô∏è Th·ªëng k√™ m·ª©c c·∫£nh b√°o:`, alertStats);
          successMessage += `\n‚ö†Ô∏è G·ªìm ${response.data.features.length} c·∫£nh b√°o m·∫•t r·ª´ng v·ªõi c√°c m·ª©c ƒë·ªô kh√°c nhau`;
        }
        
        toast.success(successMessage);
        console.log(`‚úÖ ƒê√£ t·∫£i TO√ÄN B·ªò ${response.data.features.length} features cho ${layerName} trong ${loadTime}s`);
        
        // Th√¥ng b√°o ƒëang zoom
        toast.info(`üó∫Ô∏è ƒêang zoom ƒë·∫øn v√πng hi·ªÉn th·ªã ${layerName}...`, { autoClose: 1500 });
      } else {
        console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu features trong response cho ${layerName}`);
        toast.warning(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho ${layerName}`);
      }
    } catch (err) {
      console.error(`‚ùå L·ªói khi t·∫£i ${layerName}:`, err);
      
      // Log chi ti·∫øt l·ªói
      if (err.response) {
        console.error(`üì° Response error:`, {
          status: err.response.status,
          statusText: err.response.statusText,
          data: err.response.data
        });
      }
      
      let errorMessage = `‚ùå Kh√¥ng th·ªÉ t·∫£i ${layerName}`;
      if (err.response?.status === 404) {
        errorMessage += ": Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu";
      } else if (err.response?.status === 500) {
        errorMessage += ": L·ªói server";
      } else if (err.response?.status === 504) {
        errorMessage += ": Timeout - D·ªØ li·ªáu qu√° l·ªõn, vui l√≤ng th·ª≠ l·∫°i";
      } else {
        errorMessage += `: ${err.response?.data?.error || err.message}`;
      }
      
      toast.error(errorMessage);
      setLayerLoading(layerKey, false);
    }
  };

  // H√†m t·∫£i t·∫•t c·∫£ layers c√πng l√∫c
  const handleLoadAllLayers = async () => {
    const layersToLoad = [
      { key: 'administrative', name: 'Ranh gi·ªõi h√†nh ch√≠nh' },
      { key: 'forestTypes', name: 'C√°c lo·∫°i r·ª´ng (LDLR)' },
      { key: 'forestManagement', name: 'Ch·ªß qu·∫£n l√Ω r·ª´ng' },
      { key: 'terrain', name: 'N·ªÅn ƒë·ªãa h√¨nh' },
      { key: 'deforestationAlerts', name: 'D·ª± b√°o m·∫•t r·ª´ng m·ªõi nh·∫•t' }
    ];

    setGlobalLoading(true);
    setTotalLayers(layersToLoad.length);
    setLoadedLayers(0);
    setLoadingStage('counting');

    try {
      toast.info(`üöÄ B·∫Øt ƒë·∫ßu t·∫£i TO√ÄN B·ªò ${layersToLoad.length} l·ªõp d·ªØ li·ªáu...`);

      for (let i = 0; i < layersToLoad.length; i++) {
        const layer = layersToLoad[i];
        setLoadingStage('loading');
        
        await handleLoadLayer(layer.key, layer.name);
        
        setLoadedLayers(i + 1);
        
        // Ngh·ªâ ng·∫Øn gi·ªØa c√°c layer ƒë·ªÉ tr√°nh overload
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      setLoadingStage('complete');
      toast.success(`üéâ ƒê√£ t·∫£i th√†nh c√¥ng TO√ÄN B·ªò ${layersToLoad.length} l·ªõp d·ªØ li·ªáu!`);
      
    } catch (error) {
      console.error('L·ªói khi t·∫£i t·∫•t c·∫£ layers:', error);
      toast.error('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
    } finally {
      setTimeout(() => {
        setGlobalLoading(false);
        setLoadingStage('');
        setLoadedLayers(0);
        setTotalLayers(0);
      }, 2000);
    }
  };

  return (
    <>
      {/* Enhanced Loading Overlay */}
      <EnhancedLoadingComponent 
        isLoading={globalLoading}
        loadingStage={loadingStage}
        totalLayers={totalLayers}
        loadedLayers={loadedLayers}
      />

      <div>
        <div
          className="bg-forest-green-primary text-white py-0.2 px-4 rounded-full text-sm font-medium uppercase tracking-wide text-left shadow-md w-full cursor-pointer"
          onClick={() => setIsForecastOpen(!isForecastOpen)}
        >
          C·∫≠p nh·∫≠t d·ªØ li·ªáu
        </div>

        {isForecastOpen && (
          <div className="flex flex-col gap-2 px-1 pt-3">
            <div className="flex flex-col gap-3">

              {/* N√∫t t·∫£i t·∫•t c·∫£ layers */}
              <div className="mb-4 p-3 bg-blue-50 rounded-md border border-blue-200">
                <button 
                  onClick={handleLoadAllLayers}
                  disabled={globalLoading || Object.values(mapLayers).some(layer => layer.loading)}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md text-center flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {globalLoading ? (
                    <>
                      <ClipLoader color="#ffffff" size={16} />
                      <span className="ml-2">ƒêang t·∫£i t·∫•t c·∫£...</span>
                    </>
                  ) : (
                    <>
                      üöÄ T·∫£i TO√ÄN B·ªò d·ªØ li·ªáu (5 l·ªõp)
                    </>
                  )}
                </button>
                <p className="text-xs text-gray-600 mt-2 text-center">
                  üí° T·∫£i m·ªôt l√∫c t·∫•t c·∫£ c√°c l·ªõp ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian
                </p>
              </div>

              <div className="border-t border-gray-200 pt-3">
                <h4 className="text-sm font-medium mb-3 text-gray-700">Ho·∫∑c t·∫£i t·ª´ng l·ªõp ri√™ng bi·ªát:</h4>
              </div>

              {/* 1. L·ªõp ranh gi·ªõi h√†nh ch√≠nh */}
              <div className="flex items-center gap-1">
                <label className="text-sm font-medium w-full">
                  üèõÔ∏è L·ªõp ranh gi·ªõi h√†nh ch√≠nh
                  <span className="text-xs text-gray-500 block">
                    {mapLayers.administrative.data ? 
                      `‚úÖ ƒê√£ t·∫£i (${mapLayers.administrative.data.features?.length || 0} ƒë·ªëi t∆∞·ª£ng)` : 
                      'Ch∆∞a t·∫£i'}
                  </span>
                </label>
                <button 
                  onClick={() => handleLoadLayer('administrative', 'Ranh gi·ªõi h√†nh ch√≠nh')}
                  disabled={mapLayers.administrative.loading || globalLoading}
                  className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
                >
                  {mapLayers.administrative.loading ? (
                    <>
                      <ClipLoader color="#333" size={14} />
                      <span className="ml-1">ƒêang t·∫£i...</span>
                    </>
                  ) : (
                    mapLayers.administrative.data ? "T·∫£i l·∫°i" : "T·∫£i l√™n"
                  )}
                </button>
              </div>

              {/* 2. L·ªõp c√°c lo·∫°i r·ª´ng (d·ª±a tr√™n LDLR) */}
              <div className="flex items-center gap-1">
                <label className="text-sm font-medium w-full">
                  üå≤ L·ªõp 3 lo·∫°i r·ª´ng (LDLR)
                  <span className="text-xs text-gray-500 block">
                    {mapLayers.forestTypes.data ? 
                      `‚úÖ ƒê√£ t·∫£i (${mapLayers.forestTypes.data.features?.length || 0} ƒë·ªëi t∆∞·ª£ng)` : 
                      'Ch∆∞a t·∫£i'}
                  </span>
                </label>
                <button 
                  onClick={() => handleLoadLayer('forestTypes', 'C√°c lo·∫°i r·ª´ng (LDLR)')}
                  disabled={mapLayers.forestTypes.loading || globalLoading}
                  className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
                >
                  {mapLayers.forestTypes.loading ? (
                    <>
                      <ClipLoader color="#333" size={14} />
                      <span className="ml-1">ƒêang t·∫£i...</span>
                    </>
                  ) : (
                    mapLayers.forestTypes.data ? "T·∫£i l·∫°i" : "T·∫£i l√™n"
                  )}
                </button>
              </div>

              {/* 3. L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng */}
              <div className="flex items-center gap-1">
                <label className="text-sm font-medium w-full">
                  üè¢ L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng
                  <span className="text-xs text-gray-500 block">
                    {mapLayers.forestManagement.data ? 
                      `‚úÖ ƒê√£ t·∫£i (${mapLayers.forestManagement.data.features?.length || 0} ƒë·ªëi t∆∞·ª£ng)` : 
                      'Ch∆∞a t·∫£i'}
                  </span>
                </label>
                <button 
                  onClick={() => handleLoadLayer('forestManagement', 'Ch·ªß qu·∫£n l√Ω r·ª´ng')}
                  disabled={mapLayers.forestManagement.loading || globalLoading}
                  className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
                >
                  {mapLayers.forestManagement.loading ? (
                    <>
                      <ClipLoader color="#333" size={14} />
                      <span className="ml-1">ƒêang t·∫£i...</span>
                    </>
                  ) : (
                    mapLayers.forestManagement.data ? "T·∫£i l·∫°i" : "T·∫£i l√™n"
                  )}
                </button>
              </div>

              {/* 4. L·ªõp n·ªÅn ƒë·ªãa h√¨nh */}
              <div className="flex items-center gap-1">
                <label className="text-sm font-medium w-full">
                  üèîÔ∏è L·ªõp n·ªÅn ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng
                  <span className="text-xs text-gray-500 block">
                    {mapLayers.terrain.data ? 
                      `‚úÖ ƒê√£ t·∫£i (${mapLayers.terrain.data.features?.length || 0} ƒë·ªëi t∆∞·ª£ng)` : 
                      'Ch∆∞a t·∫£i'}
                  </span>
                </label>
                <button 
                  onClick={() => handleLoadLayer('terrain', 'N·ªÅn ƒë·ªãa h√¨nh')}
                  disabled={mapLayers.terrain.loading || globalLoading}
                  className="w-18 whitespace-nowrap bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
                >
                  {mapLayers.terrain.loading ? (
                    <>
                      <ClipLoader color="#333" size={14} />
                      <span className="ml-1">ƒêang t·∫£i...</span>
                    </>
                  ) : (
                    mapLayers.terrain.data ? "T·∫£i l·∫°i" : "T·∫£i l√™n"
                  )}
                </button>
              </div>

              {/* 5. L·ªõp d·ª± b√°o m·∫•t r·ª´ng m·ªõi nh·∫•t */}
              <div className="flex items-center gap-1">
                <label className="text-sm font-medium w-full">
                  ‚ö†Ô∏è D·ª± b√°o m·∫•t r·ª´ng m·ªõi nh·∫•t
                  <span className="text-xs text-gray-500 block">
                    {mapLayers.deforestationAlerts.data ? 
                      `‚úÖ ƒê√£ t·∫£i (${mapLayers.deforestationAlerts.data.features?.length || 0} ƒë·ªëi t∆∞·ª£ng)` : 
                      'Ch∆∞a t·∫£i'}
                  </span>
                </label>
                <button 
                  onClick={() => handleLoadLayer('deforestationAlerts', 'D·ª± b√°o m·∫•t r·ª´ng m·ªõi nh·∫•t')}
                  disabled={mapLayers.deforestationAlerts.loading || globalLoading}
                  className="w-18 whitespace-nowrap bg-red-100 hover:bg-red-200 text-red-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center flex items-center justify-center disabled:opacity-50"
                >
                  {mapLayers.deforestationAlerts.loading ? (
                    <>
                      <ClipLoader color="#dc2626" size={14} />
                      <span className="ml-1">ƒêang t·∫£i...</span>
                    </>
                  ) : (
                    mapLayers.deforestationAlerts.data ? "T·∫£i l·∫°i" : "T·∫£i l√™n"
                  )}
                </button>
              </div>

              {/* Th√¥ng tin tr·∫°ng th√°i */}
              <div className="mt-4 p-3 bg-gray-50 rounded-md">
                <h4 className="text-sm font-medium mb-2">üìä Tr·∫°ng th√°i c√°c l·ªõp:</h4>
                <div className="grid grid-cols-1 gap-2 text-xs">
                  {Object.entries(mapLayers).map(([key, layer]) => (
                    <div key={key} className="flex items-center gap-2">
                      <div 
                        className={`w-3 h-3 rounded-full ${
                          layer.loading ? 'bg-yellow-500 animate-pulse' : 
                          layer.data ? 'bg-green-500' : 'bg-gray-300'
                        }`}
                      ></div>
                      <span className={`${layer.visible ? 'font-medium' : 'opacity-60'}`}>
                        {layer.name}
                        {/* Th√™m icon ƒë·∫∑c bi·ªát */}
                        {key === 'forestManagement' && ' üè¢'}
                        {key === 'administrative' && ' üèõÔ∏è'}
                        {key === 'forestTypes' && ' üå≤'}
                        {key === 'terrain' && ' üèîÔ∏è'}
                        {key === 'deforestationAlerts' && ' ‚ö†Ô∏è'}
                      </span>
                      {layer.data && (
                        <span className="text-gray-500">
                          ({layer.data.features?.length || 0})
                        </span>
                      )}
                      {layer.loading && (
                        <span className="text-yellow-600 text-xs">ƒêang t·∫£i...</span>
                      )}
                    </div>
                  ))}
                </div>
                
                {/* Th·ªëng k√™ t·ªïng h·ª£p */}
                <div className="mt-2 p-2 bg-blue-50 rounded text-xs">
                  <div className="flex justify-between">
                    <span><strong>ƒê√£ t·∫£i:</strong> {Object.values(mapLayers).filter(layer => layer.data).length} l·ªõp</span>
                    <span><strong>Hi·ªÉn th·ªã:</strong> {Object.values(mapLayers).filter(layer => layer.data && layer.visible).length} l·ªõp</span>
                  </div>
                  <div className="flex justify-between mt-1">
                    <span><strong>T·ªïng ƒë·ªëi t∆∞·ª£ng:</strong> {Object.values(mapLayers).reduce((total, layer) => total + (layer.data?.features?.length || 0), 0)}</span>
                  </div>
                </div>

                {/* L∆∞u √Ω v·ªÅ performance */}
                <div className="mt-3 p-2 bg-yellow-50 rounded text-xs">
                  <p className="text-yellow-800">
                    <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> H·ªá th·ªëng hi·ªán ƒëang t·∫£i TO√ÄN B·ªò d·ªØ li·ªáu (kh√¥ng gi·ªõi h·∫°n).
                    Qu√° tr√¨nh t·∫£i c√≥ th·ªÉ m·∫•t 30-60 gi√¢y t√πy v√†o k√≠ch th∆∞·ªõc d·ªØ li·ªáu v√† t·ªëc ƒë·ªô m·∫°ng.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default CapNhatDuLieu;