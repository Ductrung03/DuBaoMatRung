// client/src/dashboard/components/sidebars/quanlydulieu/XacMinhDuBaoMatRung.jsx - FIXED SEARCH LOGIC
import React, { useState } from "react";
import Select from "../../Select";
import axios from "axios";
import { toast } from "react-toastify";
import { ClipLoader } from "react-spinners";
import { useGeoData } from "../../../contexts/GeoDataContext";
import { useAuth } from "../../../contexts/AuthContext";
import config from "../../../../config";

const XacMinhDuBaoMatRung = () => {
  const { geoData, setGeoData } = useGeoData();
  const { user } = useAuth();
  
  const nguyenNhanList = [
    "Khai th√°c r·ª´ng tr√°i ph√©p",
    "Chuy·ªÉn ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t",
    "Ch√°y r·ª´ng",
    "Khai th√°c kho√°ng s·∫£n",
    "S·∫°t l·ªü ƒë·∫•t",
    "T·ª± nhi√™n ph·ª•c h·ªìi",
    "Sai s√≥t d·ªØ li·ªáu",
    "Nguy√™n nh√¢n kh√°c",
  ];

  const [isForecastOpen, setIsForecastOpen] = useState(true);
  const [openDropdown, setOpenDropdown] = useState(null);
  const [loading, setLoading] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  
  // Form states
  const [formData, setFormData] = useState({
    maLoDuBao: "",
    nguyenNhan: "",
    dienTichThucTe: "",
    nguoiXacMinh: user?.full_name || "",
    ngayXacMinh: "",
    ghiChu: ""
  });

  // Selected record state
  const [selectedRecord, setSelectedRecord] = useState(null);

  // ‚úÖ FIX: H√†m t√¨m ki·∫øm ƒë∆∞·ª£c s·ª≠a ho√†n to√†n
  const handleTimKiem = async () => {
    if (!formData.maLoDuBao.trim()) {
      toast.warning("Vui l√≤ng nh·∫≠p m√£ l√¥ d·ª± b√°o");
      return;
    }

    setSearchLoading(true);
    
    try {
      const gidToSearch = formData.maLoDuBao.trim();
      console.log("üîç T√¨m ki·∫øm CB-" + gidToSearch);

      // ‚úÖ FIX: G·ªçi API search ƒë√£ ƒë∆∞·ª£c s·ª≠a
      const response = await axios.get(
        `${config.API_URL}/api/search/mat-rung/${gidToSearch}`,
        {
          params: { radius: 10000 }, // TƒÉng radius l√™n 10km ƒë·ªÉ t√¨m nhi·ªÅu h∆°n
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.success) {
        const { target_feature, geojson, center, bbox } = response.data.data;
        
        console.log("‚úÖ T√¨m th·∫•y CB-" + gidToSearch, {
          target_gid: target_feature.properties.gid,
          total_features: geojson.features.length,
          center: center,
          bbox: bbox
        });

        // ‚úÖ FIX: Set selectedRecord t·ª´ target_feature
        setSelectedRecord(target_feature);
        
        // ‚úÖ FIX: ƒê·∫£m b·∫£o target feature lu√¥n ·ªü ƒë·∫ßu array
        const sortedFeatures = [
          target_feature, // Target lu√¥n ƒë·∫ßu ti√™n
          ...geojson.features.filter(f => f.properties.gid !== target_feature.properties.gid)
        ];
        
        const sortedGeoJSON = {
          ...geojson,
          features: sortedFeatures
        };
        
        // ‚úÖ FIX: Load GeoJSON v·ªõi target ·ªü ƒë·∫ßu
        setGeoData(sortedGeoJSON);
        
        // ‚úÖ FIX: ƒêi·ªÅn th√¥ng tin target v√†o form
        const props = target_feature.properties;
        setFormData(prev => ({
          ...prev,
          dienTichThucTe: props.verified_area ? (props.verified_area / 10000).toFixed(2) : "",
          nguyenNhan: props.verification_reason || "",
          nguoiXacMinh: user?.full_name || "",
          ngayXacMinh: props.detection_date || "",
          ghiChu: props.verification_notes || ""
        }));

        // ‚úÖ FIX: Zoom map ƒë·∫øn target feature v·ªõi delay
        setTimeout(() => {
          const zoomEvent = new CustomEvent('zoomToFeature', {
            detail: { 
              feature: target_feature,
              center: center,
              bbox: bbox,
              zoom: 16 // Zoom level cao ƒë·ªÉ th·∫•y r√µ
            }
          });
          window.dispatchEvent(zoomEvent);
          
          console.log("üéØ Dispatched zoom event for CB-" + gidToSearch);
        }, 500);

        // ‚úÖ FIX: Highlight row trong table v·ªõi delay
        setTimeout(() => {
          const tableEvent = new CustomEvent('highlightTableRow', {
            detail: { 
              feature: target_feature,
              gid: target_feature.properties.gid
            }
          });
          window.dispatchEvent(tableEvent);
          
          console.log("üéØ Dispatched table highlight for CB-" + gidToSearch);
        }, 1000);

        toast.success(`‚úÖ ƒê√£ t√¨m th·∫•y CB-${gidToSearch} v√† load ${sortedFeatures.length} khu v·ª±c`, {
          autoClose: 3000
        });

      } else {
        toast.error(response.data.message || "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu");
        setSelectedRecord(null);
      }

    } catch (error) {
      console.error("‚ùå L·ªói t√¨m ki·∫øm:", error);
      
      let errorMessage = "C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm";
      
      if (error.response?.status === 404) {
        errorMessage = `‚ùå Kh√¥ng t√¨m th·∫•y l√¥ CB-${formData.maLoDuBao} trong c∆° s·ªü d·ªØ li·ªáu`;
      } else if (error.response?.status === 401) {
        errorMessage = "‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      toast.error(errorMessage, { autoClose: 5000 });
      setSelectedRecord(null);
      
    } finally {
      setSearchLoading(false);
    }
  };

  // ‚úÖ FIX: H√†m x√°c minh v·ªõi validation t·ªët h∆°n
  const handleCapNhat = async () => {
    if (!selectedRecord) {
      toast.warning("Vui l√≤ng t√¨m ki·∫øm v√† ch·ªçn l√¥ d·ª± b√°o tr∆∞·ªõc khi c·∫≠p nh·∫≠t");
      return;
    }

    if (!formData.nguyenNhan) {
      toast.error("Vui l√≤ng ch·ªçn nguy√™n nh√¢n");
      return;
    }

    // Validate di·ªán t√≠ch n·∫øu c√≥ nh·∫≠p
    if (formData.dienTichThucTe && formData.dienTichThucTe.trim()) {
      const dienTich = parseFloat(formData.dienTichThucTe);
      if (isNaN(dienTich) || dienTich <= 0) {
        toast.error("Di·ªán t√≠ch th·ª±c t·∫ø ph·∫£i l√† s·ªë h·ª£p l·ªá v√† l·ªõn h∆°n 0");
        return;
      }
    }

    setLoading(true);
    
    try {
      const gid = selectedRecord.properties.gid;
      console.log("üîÑ B·∫Øt ƒë·∫ßu x√°c minh CB-" + gid);

      // Chu·∫©n b·ªã d·ªØ li·ªáu x√°c minh
      const verificationData = {
        verification_reason: formData.nguyenNhan,
        verification_notes: formData.ghiChu || null,
        verified_area: formData.dienTichThucTe && formData.dienTichThucTe.trim()
          ? parseFloat(formData.dienTichThucTe) * 10000 // ha ‚Üí m¬≤
          : null,
        detection_date: formData.ngayXacMinh || null
      };

      console.log("üìã D·ªØ li·ªáu x√°c minh:", verificationData);

      // G·ªçi API x√°c minh
      const response = await axios.post(
        `${config.API_URL}/api/verification/mat-rung/${gid}/verify`,
        verificationData,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.data.success) {
        const { data: updatedData, changes } = response.data;
        
        console.log("‚úÖ X√°c minh th√†nh c√¥ng CB-" + gid, updatedData);

        // ‚úÖ FIX: C·∫≠p nh·∫≠t d·ªØ li·ªáu local ngay l·∫≠p t·ª©c
        if (geoData && geoData.features) {
          const updatedFeatures = geoData.features.map(feature => {
            if (feature.properties.gid === gid) {
              return {
                ...feature,
                properties: {
                  ...feature.properties,
                  detection_status: updatedData.detection_status,
                  verification_reason: updatedData.verification_reason,
                  verified_area: updatedData.verified_area,
                  verification_notes: updatedData.verification_notes,
                  detection_date: updatedData.detection_date,
                  verified_by: updatedData.verified_by,
                  verified_by_name: updatedData.verified_by_name
                }
              };
            }
            return feature;
          });

          setGeoData({
            ...geoData,
            features: updatedFeatures
          });
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt
        let successMessage = `‚úÖ ƒê√£ x√°c minh th√†nh c√¥ng CB-${gid}!`;
        if (changes.area_changed) {
          successMessage += `\nüìè Di·ªán t√≠ch: ${(changes.original_area / 10000).toFixed(2)} ha ‚Üí ${(changes.new_verified_area / 10000).toFixed(2)} ha`;
        } else {
          successMessage += `\nüìè Di·ªán t√≠ch: Gi·ªØ nguy√™n ${(changes.original_area / 10000).toFixed(2)} ha`;
        }
        successMessage += `\nüìÖ Ng√†y: ${changes.verification_date_used}`;
        successMessage += `\nüë§ Ng∆∞·ªùi XM: ${changes.verified_by_user}`;

        toast.success(successMessage, { autoClose: 5000 });
        
        // ‚úÖ FIX: Reset form nh∆∞ng gi·ªØ m√£ l√¥ ƒë·ªÉ ti·ªán t√¨m ki·∫øm ti·∫øp
        const currentMaLo = formData.maLoDuBao;
        setFormData({
          maLoDuBao: currentMaLo, // Gi·ªØ m√£ l√¥
          nguyenNhan: "",
          dienTichThucTe: "",
          nguoiXacMinh: user?.full_name || "",
          ngayXacMinh: "",
          ghiChu: ""
        });
        
        // Clear selected record ƒë·ªÉ force t√¨m ki·∫øm l·∫°i
        setSelectedRecord(null);

        // ‚úÖ FIX: Refresh table ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi
        setTimeout(() => {
          const refreshEvent = new CustomEvent('refreshTable', {
            detail: { gid: gid }
          });
          window.dispatchEvent(refreshEvent);
        }, 1000);

      } else {
        toast.error(`‚ùå ${response.data.message}`);
      }

    } catch (error) {
      console.error("‚ùå L·ªói x√°c minh:", error);
      
      let errorMessage = "C√≥ l·ªói x·∫£y ra khi x√°c minh";
      
      if (error.response?.status === 404) {
        errorMessage = "Kh√¥ng t√¨m th·∫•y l√¥ d·ª± b√°o c·∫ßn x√°c minh";
      } else if (error.response?.status === 400) {
        errorMessage = `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${error.response.data.message}`;
      } else if (error.response?.status === 401) {
        errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      toast.error("‚ùå " + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // H√†m x·ª≠ l√Ω dropdown
  const handleDropdownToggle = (dropdownName, isOpen) => {
    setOpenDropdown(isOpen ? dropdownName : null);
  };

  return (
    <div>
      {/* Loading overlay */}
      {(loading || searchLoading) && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[9999]">
          <div className="bg-white p-8 rounded-lg shadow-2xl max-w-sm w-full mx-4">
            <div className="flex flex-col items-center space-y-4">
              <ClipLoader color="#027e02" size={40} />
              <div className="text-center">
                <div className="text-lg font-semibold text-gray-800 mb-2">
                  {searchLoading ? "ƒêang t√¨m ki·∫øm..." : "ƒêang x√°c minh..."}
                </div>
                <div className="text-sm text-gray-600">
                  {searchLoading 
                    ? `ƒêang t√¨m CB-${formData.maLoDuBao} trong c∆° s·ªü d·ªØ li·ªáu...`
                    : `ƒêang l∆∞u x√°c minh cho CB-${selectedRecord?.properties?.gid}...`
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <div
        className="bg-forest-green-primary text-white py-0.2 px-4 rounded-full text-sm font-medium uppercase tracking-wide text-left shadow-md w-full cursor-pointer"
        onClick={() => setIsForecastOpen(!isForecastOpen)}
      >
        X√°c minh d·ª± b√°o m·∫•t r·ª´ng
      </div>

      {isForecastOpen && (
        <div className="flex flex-col gap-2 px-1 pt-3">
         

          {/* ‚úÖ FIX: Hi·ªÉn th·ªã th√¥ng tin l√¥ ƒë∆∞·ª£c t√¨m th·∫•y */}
          {selectedRecord && (
            <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded-md">
              <div className="text-sm font-medium text-blue-800">
                üéØ ƒêang x√°c minh: <span className="font-bold text-red-600">CB-{selectedRecord.properties.gid}</span>
              </div>
              <div className="text-xs text-blue-600 mt-1">
                üìè Di·ªán t√≠ch: {selectedRecord.properties.area ? (selectedRecord.properties.area / 10000).toFixed(2) : 'N/A'} ha
                {selectedRecord.properties.huyen && ` | üèõÔ∏è ${selectedRecord.properties.huyen}`}
                {selectedRecord.properties.xa && ` | üèòÔ∏è ${selectedRecord.properties.xa}`}
              </div>
              {selectedRecord.properties.detection_status === 'ƒê√£ x√°c minh' && (
                <div className="text-xs text-green-600 mt-1 font-medium">
                  ‚úÖ ƒê√£ x√°c minh: {selectedRecord.properties.verified_by_name || 'N/A'}
                </div>
              )}
            </div>
          )}

          {/* Form */}
          <div className="flex flex-col gap-3">
            {/* M√£ l√¥ d·ª± b√°o */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">M√£ l√¥ CB</label>
              <div className="flex items-center gap-2 w-36">
                <input
                  type="text"
                  value={formData.maLoDuBao}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === '' || /^\d+$/.test(value)) {
                      handleInputChange('maLoDuBao', value);
                      // Clear selected khi thay ƒë·ªïi m√£
                      if (selectedRecord && value !== selectedRecord.properties.gid.toString()) {
                        setSelectedRecord(null);
                      }
                    }
                  }}
                  placeholder="VD: 3619"
                  className="w-16 border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading || searchLoading}
                />
                <button 
                  onClick={handleTimKiem}
                  disabled={loading || searchLoading || !formData.maLoDuBao.trim()}
                  className="w-16 bg-forest-green-gray hover:bg-green-200 text-black-800 whitespace-nowrap font-medium py-0.5 px-2 rounded-md text-center self-center disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {searchLoading ? (
                    <ClipLoader color="#027e02" size={12} />
                  ) : (
                    "T√¨m"
                  )}
                </button>
              </div>
            </div>

            {/* Nguy√™n nh√¢n */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Nguy√™n nh√¢n *</label>
              <div className="relative w-36">
                <select
                  value={formData.nguyenNhan}
                  onChange={(e) => handleInputChange('nguyenNhan', e.target.value)}
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  onFocus={() => handleDropdownToggle("nguyennhan", true)}
                  onBlur={() => handleDropdownToggle("nguyennhan", false)}
                  disabled={loading || searchLoading}
                  required
                >
                  <option value="">Ch·ªçn nguy√™n nh√¢n</option>
                  {nguyenNhanList.map((nn, idx) => (
                    <option key={idx} value={nn}>
                      {nn}
                    </option>
                  ))}
                </select>
                <Select isOpen={openDropdown === "nguyennhan"} />
              </div>
            </div>

            {/* Di·ªán t√≠ch th·ª±c t·∫ø */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">
                Di·ªán t√≠ch th·ª±c t·∫ø (ha)
              </label>
              <div className="relative w-36">
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={formData.dienTichThucTe}
                  onChange={(e) => handleInputChange('dienTichThucTe', e.target.value)}
                 
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading || searchLoading}
                />
               
              </div>
            </div>

            {/* Ng∆∞·ªùi x√°c minh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ng∆∞·ªùi x√°c minh</label>
              <div className="relative w-36">
                <input
                  type="text"
                  value={formData.nguoiXacMinh}
                  readOnly
                  className="w-full border border-gray-300 rounded-md py-0.2 px-2 pr-8 appearance-none bg-gray-100 text-gray-700 cursor-not-allowed"
                />
               
              </div>
            </div>

            {/* Ng√†y x√°c minh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ng√†y x√°c minh</label>
              <div className="relative w-36">
                <input
                  type="date"
                  value={formData.ngayXacMinh}
                  onChange={(e) => handleInputChange('ngayXacMinh', e.target.value)}
                  className="w-full border border-green-400 rounded-md py-0.2 px-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading || searchLoading}
                />
               
              </div>
            </div>

            {/* Ghi ch√∫ */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ghi ch√∫</label>
              <div className="relative w-36">
                <textarea
                  value={formData.ghiChu}
                  onChange={(e) => handleInputChange('ghiChu', e.target.value)}
                  placeholder="Ghi ch√∫ th√™m..."
                  rows="2"
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400 resize-none"
                  disabled={loading || searchLoading}
                />
              </div>
            </div>
          </div>

          <button 
            onClick={handleCapNhat}
            disabled={loading || searchLoading || !selectedRecord || !formData.nguyenNhan}
            className="w-36 bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
          >
            {loading ? (
              <>
                <ClipLoader color="#027e02" size={14} />
                <span className="ml-2">ƒêang l∆∞u...</span>
              </>
            ) : (
              "X√°c minh"
            )}
          </button>

         
          
        </div>
      )}
    </div>
  );
};

export default XacMinhDuBaoMatRung;