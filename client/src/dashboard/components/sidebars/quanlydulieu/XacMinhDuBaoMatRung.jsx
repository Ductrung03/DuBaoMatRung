import React, { useState } from "react";
import Select from "../../Select";

import axios from "axios";

import { toast } from "react-toastify";
import { ClipLoader } from "react-spinners";
import { useGeoData } from "../../../contexts/GeoDataContext";
import config from "../../../../config";

const XacMinhDuBaoMatRung = () => {
  const { geoData, setGeoData } = useGeoData();
  
  const nguyenNhanList = [
    "Khai th√°c r·ª´ng tr√°i ph√©p",
    "Chuy·ªÉn ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t",
    "Ch√°y r·ª´ng",
    "Khai th√°c kho√°ng s·∫£n",
    "S·∫°t l·ªü ƒë·∫•t",
    "T·ª± nhi√™n ph·ª•c h·ªìi",
    "Sai s√≥t d·ªØ li·ªáu",
    "Nguy√™n nh√¢n kh√°c",
  ];

  const [isForecastOpen, setIsForecastOpen] = useState(true);
  const [openDropdown, setOpenDropdown] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // Form states
  const [formData, setFormData] = useState({
    maLoDuBao: "",
    nguyenNhan: "",
    dienTichThucTe: "",
    nguoiXacMinh: "",
    ngayXacMinh: "",
    ghiChu: ""
  });

  // Selected record state
  const [selectedRecord, setSelectedRecord] = useState(null);

  // H√†m x·ª≠ l√Ω khi dropdown focus ho·∫∑c blur
  const handleDropdownToggle = (dropdownName, isOpen) => {
    setOpenDropdown(isOpen ? dropdownName : null);
  };

  // H√†m validation input
  const validateInputs = () => {
    const errors = [];
    
    // Validate di·ªán t√≠ch th·ª±c t·∫ø (ph·∫£i l√† s·ªë h·ª£p l·ªá)
    if (formData.dienTichThucTe && formData.dienTichThucTe.trim()) {
      const dienTich = parseFloat(formData.dienTichThucTe);
      if (isNaN(dienTich) || dienTich < 0) {
        errors.push("Di·ªán t√≠ch th·ª±c t·∫ø ph·∫£i l√† s·ªë h·ª£p l·ªá v√† l·ªõn h∆°n 0");
      }
    }
    
    // Validate required fields cho c·∫≠p nh·∫≠t
    if (selectedRecord) {
      if (!formData.nguyenNhan) errors.push("Vui l√≤ng ch·ªçn nguy√™n nh√¢n");
      if (!formData.nguoiXacMinh.trim()) errors.push("Vui l√≤ng nh·∫≠p ng∆∞·ªùi x√°c minh");
      if (!formData.ngayXacMinh) errors.push("Vui l√≤ng ch·ªçn ng√†y x√°c minh");
    }
    
    return errors;
  };

  // H√†m t√¨m ki·∫øm theo m√£ l√¥ d·ª± b√°o
  const handleTimKiem = async () => {
    if (!formData.maLoDuBao.trim()) {
      toast.warning("Vui l√≤ng nh·∫≠p m√£ l√¥ d·ª± b√°o");
      return;
    }

    setLoading(true);
    
    // Th√™m delay ƒë·ªÉ user th·∫•y loading
    await new Promise(resolve => setTimeout(resolve, 500));
    
    try {
      console.log("üîç T√¨m ki·∫øm m√£ l√¥ d·ª± b√°o:", formData.maLoDuBao);

      // T√¨m trong d·ªØ li·ªáu hi·ªán t·∫°i
      if (!geoData || !geoData.features || geoData.features.length === 0) {
        toast.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t√¨m ki·∫øm. Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.");
        return;
      }

      // T√¨m theo gid (l√¥ c·∫£nh b√°o)
      const targetGid = formData.maLoDuBao.replace(/^CB-/i, ''); // Remove CB- prefix if exists
      
      const foundFeature = geoData.features.find(feature => {
        const gid = feature.properties.gid;
        return gid && gid.toString() === targetGid.toString();
      });

      if (foundFeature) {
        setSelectedRecord(foundFeature);
        
        // L·∫•y th√¥ng tin hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã trong form
        const props = foundFeature.properties;
        setFormData(prev => ({
          ...prev,
          dienTichThucTe: props.verified_area || "",
          nguyenNhan: props.verification_reason || "",
          nguoiXacMinh: props.verified_by || "",
          ngayXacMinh: props.detection_date ? new Date(props.detection_date).toISOString().split('T')[0] : "",
          ghiChu: props.verification_notes || ""
        }));

        // T·∫°o event ƒë·ªÉ map zoom ƒë·∫øn feature
        const event = new CustomEvent('zoomToFeature', {
          detail: { feature: foundFeature }
        });
        window.dispatchEvent(event);

        // T·∫°o event ƒë·ªÉ table highlight row
        const tableEvent = new CustomEvent('highlightTableRow', {
          detail: { feature: foundFeature }
        });
        window.dispatchEvent(tableEvent);

        toast.success(`‚úÖ ƒê√£ t√¨m th·∫•y l√¥ CB-${targetGid}`);
      } else {
        toast.error(`‚ùå Kh√¥ng t√¨m th·∫•y l√¥ d·ª± b√°o: CB-${targetGid}`);
        setSelectedRecord(null);
      }

    } catch (error) {
      console.error("‚ùå L·ªói t√¨m ki·∫øm:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm");
    } finally {
      setLoading(false);
    }
  };

  // H√†m c·∫≠p nh·∫≠t th√¥ng tin x√°c minh
  const handleCapNhat = async () => {
    if (!selectedRecord) {
      toast.warning("Vui l√≤ng t√¨m ki·∫øm v√† ch·ªçn l√¥ d·ª± b√°o tr∆∞·ªõc khi c·∫≠p nh·∫≠t");
      return;
    }

    // Validate inputs tr∆∞·ªõc khi submit
    const validationErrors = validateInputs();
    if (validationErrors.length > 0) {
      toast.error(validationErrors.join("\n"));
      return;
    }

    setLoading(true);
    
    // Th√™m delay ƒë·ªÉ user th·∫•y loading
    await new Promise(resolve => setTimeout(resolve, 300));
    
    try {
      console.log("üîÑ C·∫≠p nh·∫≠t th√¥ng tin x√°c minh cho gid:", selectedRecord.properties.gid);

      const gid = selectedRecord.properties.gid;
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi validation
      const dienTichValue = formData.dienTichThucTe && formData.dienTichThucTe.trim() 
        ? parseFloat(formData.dienTichThucTe) 
        : null;
      
      // C·∫≠p nh·∫≠t t·ª´ng tr∆∞·ªùng m·ªôt ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
      const updates = [
        {
          column: 'verified_area',
          value: dienTichValue,
          label: 'Di·ªán t√≠ch th·ª±c t·∫ø',
          skip: dienTichValue === null || isNaN(dienTichValue)
        },
        {
          column: 'verification_reason', 
          value: formData.nguyenNhan,
          label: 'Nguy√™n nh√¢n',
          skip: !formData.nguyenNhan
        },
        {
          column: 'verified_by',
          value: formData.nguoiXacMinh,
          label: 'Ng∆∞·ªùi x√°c minh',
          skip: !formData.nguoiXacMinh.trim()
        },
        {
          column: 'detection_date',
          value: formData.ngayXacMinh,
          label: 'Ng√†y x√°c minh',
          skip: !formData.ngayXacMinh
        },
        {
          column: 'verification_notes',
          value: formData.ghiChu || null,
          label: 'Ghi ch√∫',
          skip: false // Always allow null/empty notes
        },
        {
          column: 'detection_status',
          value: 'ƒê√£ x√°c minh',
          label: 'Tr·∫°ng th√°i',
          skip: false
        }
      ];

      // Th·ª±c hi·ªán c·∫≠p nh·∫≠t tu·∫ßn t·ª± (ch·ªâ c√°c tr∆∞·ªùng kh√¥ng skip)
      const successUpdates = [];
      
      for (const update of updates) {
        if (!update.skip) {
          try {
            console.log(`üìù Updating ${update.label}:`, update.value);
            
            const response = await axios.post(
              `${config.API_URL}/api/data/update-with-where`,
              {
                table: "mat_rung",
                column: update.column,
                value: update.value,
                whereClause: `gid = ${gid}`
              }
            );

            if (response.data.success) {
              successUpdates.push(update.label);
              console.log(`‚úÖ C·∫≠p nh·∫≠t ${update.label} th√†nh c√¥ng`);
            }
          } catch (error) {
            console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t ${update.label}:`, error);
            
            // N·∫øu l√† l·ªói validation t·ª´ DB, hi·ªÉn th·ªã chi ti·∫øt
            if (error.response?.data?.error) {
              throw new Error(`L·ªói c·∫≠p nh·∫≠t ${update.label}: ${error.response.data.error}`);
            } else {
              throw new Error(`L·ªói c·∫≠p nh·∫≠t ${update.label}: ${error.message}`);
            }
          }
        }
      }

      if (successUpdates.length === 0) {
        toast.warning("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t");
        return;
      }

      // C·∫≠p nh·∫≠t d·ªØ li·ªáu local trong context
      if (geoData && geoData.features) {
        const updatedFeatures = geoData.features.map(feature => {
          if (feature.properties.gid === gid) {
            return {
              ...feature,
              properties: {
                ...feature.properties,
                verified_area: dienTichValue,
                verification_reason: formData.nguyenNhan,
                verified_by: formData.nguoiXacMinh,
                detection_date: formData.ngayXacMinh,
                verification_notes: formData.ghiChu || null,
                detection_status: 'ƒê√£ x√°c minh'
              }
            };
          }
          return feature;
        });

        setGeoData({
          ...geoData,
          features: updatedFeatures
        });
      }

      toast.success(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng cho l√¥ CB-${gid}!\nC·∫≠p nh·∫≠t: ${successUpdates.join(", ")}`);
      
      // Reset form sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
      setFormData({
        maLoDuBao: "",
        nguyenNhan: "",
        dienTichThucTe: "",
        nguoiXacMinh: "",
        ngayXacMinh: "",
        ghiChu: ""
      });
      setSelectedRecord(null);

    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t x√°c minh:", error);
      
      // Hi·ªÉn th·ªã l·ªói chi ti·∫øt
      const errorMessage = error.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin x√°c minh";
      toast.error(`‚ùå ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div>
      {/* Loading overlay v·ªõi animation t·ªët h∆°n */}
      {loading && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-[9999]">
          <div className="bg-white p-8 rounded-lg shadow-2xl max-w-sm w-full mx-4">
            <div className="flex flex-col items-center space-y-4">
              <ClipLoader color="#027e02" size={40} />
              <div className="text-center">
                <div className="text-lg font-semibold text-gray-800 mb-2">
                  {selectedRecord ? "ƒêang c·∫≠p nh·∫≠t..." : "ƒêang t√¨m ki·∫øm..."}
                </div>
                <div className="text-sm text-gray-600">
                  {selectedRecord 
                    ? `ƒêang l∆∞u th√¥ng tin x√°c minh cho l√¥ CB-${selectedRecord.properties.gid}`
                    : `ƒêang t√¨m ki·∫øm l√¥ CB-${formData.maLoDuBao}`
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* D·ª∞ B√ÅO M·∫§T R·ª™NG T·ª∞ ƒê·ªòNG */}
      <div
        className="bg-forest-green-primary text-white py-0.2 px-4 rounded-full text-sm font-medium uppercase tracking-wide text-left shadow-md w-full cursor-pointer"
        onClick={() => setIsForecastOpen(!isForecastOpen)}
      >
        X√°c minh d·ª± b√°o m·∫•t r·ª´ng
      </div>

      {isForecastOpen && (
        <div className="flex flex-col gap-2 px-1 pt-3">
          {/* Hi·ªÉn th·ªã th√¥ng tin l√¥ ƒëang ƒë∆∞·ª£c ch·ªçn */}
          {selectedRecord && (
            <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded-md">
              <div className="text-sm font-medium text-blue-800">
                üìå ƒêang x√°c minh: CB-{selectedRecord.properties.gid}
              </div>
              <div className="text-xs text-blue-600 mt-1">
                Di·ªán t√≠ch: {selectedRecord.properties.area ? (selectedRecord.properties.area / 10000).toFixed(2) : 'N/A'} ha
                {selectedRecord.properties.huyen && ` | ${selectedRecord.properties.huyen}`}
                {selectedRecord.properties.xa && ` | ${selectedRecord.properties.xa}`}
              </div>
              {selectedRecord.properties.detection_status === 'ƒê√£ x√°c minh' && (
                <div className="text-xs text-green-600 mt-1 font-medium">
                  ‚úÖ ƒê√£ ƒë∆∞·ª£c x√°c minh tr∆∞·ªõc ƒë√≥
                </div>
              )}
            </div>
          )}

          {/* Container ƒë·ªÉ cƒÉn ch·ªânh */}
          <div className="flex flex-col gap-3">
            {/* M√£ l√¥ d·ª± b√°o v·ªõi validation */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">M√£ l√¥ d·ª± b√°o</label>
              <div className="flex items-center gap-2 w-36">
                <input
                  type="text"
                  value={formData.maLoDuBao}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Ch·ªâ cho ph√©p s·ªë (GID l√† integer)
                    if (value === '' || /^\d+$/.test(value)) {
                      handleInputChange('maLoDuBao', value);
                    }
                  }}
                  placeholder="VD: 123"
                  className="w-16 border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading}
                />
                <button 
                  onClick={handleTimKiem}
                  disabled={loading || !formData.maLoDuBao.trim()}
                  className="w-16 bg-forest-green-gray hover:bg-green-200 text-black-800 whitespace-nowrap font-medium py-0.5 px-2 rounded-md text-center self-center disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {loading && !selectedRecord ? (
                    <ClipLoader color="#027e02" size={12} />
                  ) : (
                    "T√¨m"
                  )}
                </button>
              </div>
            </div>

            {/* Nguy√™n nh√¢n */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Nguy√™n nh√¢n</label>
              <div className="relative w-36">
                <select
                  value={formData.nguyenNhan}
                  onChange={(e) => handleInputChange('nguyenNhan', e.target.value)}
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  onFocus={() => handleDropdownToggle("nguyennhan", true)}
                  onBlur={() => handleDropdownToggle("nguyennhan", false)}
                  disabled={loading}
                >
                  <option value="">Ch·ªçn nguy√™n nh√¢n</option>
                  {nguyenNhanList.map((nn, idx) => (
                    <option key={idx} value={nn}>
                      {nn}
                    </option>
                  ))}
                </select>
                <Select isOpen={openDropdown === "nguyennhan"} />
              </div>
            </div>

            {/* Di·ªán t√≠ch th·ª±c t·∫ø v·ªõi validation */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">
                Di·ªán t√≠ch th·ª±c t·∫ø (ha)
              </label>
              <div className="relative w-36">
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={formData.dienTichThucTe}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Ch·ªâ cho ph√©p s·ªë v√† d·∫•u th·∫≠p ph√¢n
                    if (value === '' || /^\d*\.?\d*$/.test(value)) {
                      handleInputChange('dienTichThucTe', value);
                    }
                  }}
                  onBlur={(e) => {
                    // Validate khi blur
                    const value = e.target.value;
                    if (value && (isNaN(parseFloat(value)) || parseFloat(value) < 0)) {
                      toast.warning("Di·ªán t√≠ch ph·∫£i l√† s·ªë h·ª£p l·ªá v√† l·ªõn h∆°n 0");
                      handleInputChange('dienTichThucTe', '');
                    }
                  }}
                  placeholder="VD: 1.25"
                  className={`w-full border rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 ${
                    formData.dienTichThucTe && (isNaN(parseFloat(formData.dienTichThucTe)) || parseFloat(formData.dienTichThucTe) < 0)
                      ? 'border-red-400 focus:ring-red-400'
                      : 'border-green-400 focus:ring-green-400'
                  }`}
                  disabled={loading}
                />
                {formData.dienTichThucTe && (isNaN(parseFloat(formData.dienTichThucTe)) || parseFloat(formData.dienTichThucTe) < 0) && (
                  <div className="absolute -bottom-5 left-0 text-xs text-red-500">
                    Nh·∫≠p s·ªë h·ª£p l·ªá
                  </div>
                )}
              </div>
            </div>

            {/* Ng∆∞·ªùi x√°c minh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ng∆∞·ªùi x√°c minh</label>
              <div className="relative w-36">
                <input
                  type="text"
                  value={formData.nguoiXacMinh}
                  onChange={(e) => handleInputChange('nguoiXacMinh', e.target.value)}
                  placeholder="T√™n ng∆∞·ªùi x√°c minh..."
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading}
                />
              </div>
            </div>

            {/* Ng√†y x√°c minh */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ng√†y x√°c minh</label>
              <div className="relative w-36">
                <input
                  type="date"
                  value={formData.ngayXacMinh}
                  onChange={(e) => handleInputChange('ngayXacMinh', e.target.value)}
                  className="w-full border border-green-400 rounded-md py-0.2 px-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  disabled={loading}
                />
              </div>
            </div>

            {/* Ghi ch√∫ */}
            <div className="flex items-center gap-1">
              <label className="text-sm font-medium w-40">Ghi ch√∫</label>
              <div className="relative w-36">
                <textarea
                  value={formData.ghiChu}
                  onChange={(e) => handleInputChange('ghiChu', e.target.value)}
                  placeholder="Ghi ch√∫ th√™m..."
                  rows="2"
                  className="w-full border border-green-400 rounded-md py-0.2 px-2 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400 resize-none"
                  disabled={loading}
                />
              </div>
            </div>
          </div>

          <button 
            onClick={handleCapNhat}
            disabled={loading || !selectedRecord}
            className="w-36 bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
          >
            {loading && selectedRecord ? (
              <>
                <ClipLoader color="#027e02" size={14} />
                <span className="ml-2">ƒêang l∆∞u...</span>
              </>
            ) : (
              "C·∫≠p nh·∫≠t"
            )}
          </button>

          {/* Th√¥ng tin h∆∞·ªõng d·∫´n */}
          <div className="mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded-md">
            <div className="text-xs text-yellow-800">
              <div className="font-medium mb-1">üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</div>
              <ul className="list-disc list-inside space-y-1">
                <li>Nh·∫≠p m√£ GID (ch·ªâ s·ªë, VD: 123) c·ªßa l√¥ d·ª± b√°o c·∫ßn x√°c minh</li>
                <li>·∫§n "T√¨m" ƒë·ªÉ t√¨m ki·∫øm v√† hi·ªÉn th·ªã tr√™n b·∫£n ƒë·ªì</li>
                <li>Di·ªán t√≠ch th·ª±c t·∫ø ph·∫£i l√† s·ªë h·ª£p l·ªá (VD: 1.25)</li>
                <li>ƒêi·ªÅn ƒë·∫ßy ƒë·ªß: Nguy√™n nh√¢n, Ng∆∞·ªùi x√°c minh, Ng√†y x√°c minh</li>
                <li>·∫§n "C·∫≠p nh·∫≠t" ƒë·ªÉ l∆∞u th√¥ng tin x√°c minh</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default XacMinhDuBaoMatRung;