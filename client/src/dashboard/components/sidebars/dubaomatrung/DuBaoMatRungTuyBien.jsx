import React, { useState, useEffect } from "react";
import Select from "../../Select";
import { useAuth } from "../../../contexts/AuthContext";
import { useGeoData } from "../../../contexts/GeoDataContext";
import config from "../../../../config";
import DistrictDropdown from "../../DistrictDropdown";
import { toast } from "react-toastify";

const DuBaoMatRungTuyBien = () => {
  const { isAdmin, getUserDistrictId } = useAuth();
  const { setGeoData, setLoading } = useGeoData();
  
  const [xaList, setXaList] = useState([]);
  const [isForecastOpen, setIsForecastOpen] = useState(true);
  const [isInputOpen, setInputOpen] = useState(true);
  const [selectedHuyen, setSelectedHuyen] = useState("");
  const [selectedXa, setSelectedXa] = useState("");
  const [loading, setLoadingState] = useState(false);

  // ‚úÖ TH√äM: State cho c√°c input date c·ªßa giao di·ªán c≈©
  const [kyTruocStart, setKyTruocStart] = useState("");
  const [kyTruocEnd, setKyTruocEnd] = useState("");
  const [kySauStart, setKySauStart] = useState("");
  const [kySauEnd, setKySauEnd] = useState("");

  // Tr·∫°ng th√°i m·ªü cho t·ª´ng dropdown
  const [openDropdown, setOpenDropdown] = useState(null);

  useEffect(() => {
    // Auto-fill huy·ªán cho user c·∫•p huy·ªán
    if (!isAdmin() && getUserDistrictId()) {
      const districtMapping = {
        '01': 'L√†o Cai',
        '02': 'B√°t X√°t', 
        '03': 'M∆∞·ªùng Kh∆∞∆°ng',
        '04': 'Si Ma Cai',
        '05': 'B·∫Øc H√†',
        '06': 'B·∫£o Th·∫Øng',
        '07': 'B·∫£o Y√™n',
        '08': 'Sa Pa',
        '09': 'VƒÉn B√†n'
      };
      const districtName = districtMapping[getUserDistrictId()];
      if (districtName) {
        setSelectedHuyen(districtName);
      }
    }
  }, [isAdmin, getUserDistrictId]);

  useEffect(() => {
    // Khi huy·ªán thay ƒë·ªïi, t·∫£i danh s√°ch x√£ t∆∞∆°ng ·ª©ng
    const fetchXaList = async () => {
      if (!selectedHuyen) return;
      
      try {
        setLoadingState(true);
        const res = await fetch(
          `${config.API_URL}/api/dropdown/xa?huyen=${encodeURIComponent(selectedHuyen)}`
        );
        const data = await res.json();
        setXaList(data);
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch x√£:", err);
        setXaList([]);
      } finally {
        setLoadingState(false);
      }
    };
    
    fetchXaList();
  }, [selectedHuyen]);

  const handleHuyenChange = (e) => {
    const huyen = e.target.value;
    setSelectedHuyen(huyen);
    setSelectedXa(""); // Reset x√£ khi thay ƒë·ªïi huy·ªán
  };

  const handleXaChange = (e) => {
    setSelectedXa(e.target.value);
  };

  // ‚úÖ TH√äM: H√†m x·ª≠ l√Ω ph√¢n t√≠ch v·ªõi logic c·ªßa giao di·ªán c≈©
  const handleAnalyze = async () => {
    try {
      // ‚úÖ X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian ƒë·ªÉ ph√¢n t√≠ch
      let fromDate = "";
      let toDate = "";

      // Logic: N·∫øu c√≥ c·∫£ k·ª≥ tr∆∞·ªõc v√† k·ª≥ sau, l·∫•y t·ª´ k·ª≥ tr∆∞·ªõc ƒë·∫øn k·ª≥ sau
      // N·∫øu ch·ªâ c√≥ m·ªôt k·ª≥, s·ª≠ d·ª•ng k·ª≥ ƒë√≥
      if (kyTruocStart && kySauEnd) {
        fromDate = kyTruocStart;
        toDate = kySauEnd;
      } else if (kyTruocStart && kyTruocEnd) {
        fromDate = kyTruocStart;
        toDate = kyTruocEnd;
      } else if (kySauStart && kySauEnd) {
        fromDate = kySauStart;
        toDate = kySauEnd;
      } else {
        toast.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kho·∫£ng th·ªùi gian (k·ª≥ tr∆∞·ªõc ho·∫∑c k·ª≥ sau)");
        return;
      }

      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p cho admin
      if (isAdmin() && !selectedHuyen) {
        toast.warning("Vui l√≤ng ch·ªçn huy·ªán");
        return;
      }

      console.log("üîÆ D·ª± b√°o t√πy bi·∫øn v·ªõi tham s·ªë:", {
        fromDate,
        toDate, 
        huyen: selectedHuyen,
        xa: selectedXa
      });

      setLoading(true);
      setLoadingState(true);

      // ‚úÖ G·ªçi API tra c·ª©u d·ªØ li·ªáu v·ªõi tham s·ªë ƒë√£ x√°c ƒë·ªãnh
      const queryParams = new URLSearchParams({
        fromDate,
        toDate,
        huyen: selectedHuyen,
        xa: selectedXa
      });

      const res = await fetch(
        `${config.API_URL}/api/quan-ly-du-lieu/tra-cuu-du-lieu-bao-mat-rung?${queryParams.toString()}`
      );

      if (!res.ok) {
        const errData = await res.json();
        toast.error(errData.message || "L·ªói khi truy v·∫•n d·ªØ li·ªáu");
        return;
      }

      const data = await res.json();

      if (!data.success) {
        toast.error(data.message || "L·ªói t·ª´ backend");
        return;
      }

      if (!data.data || data.data.features.length === 0) {
        toast.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p trong kho·∫£ng th·ªùi gian n√†y");
        setGeoData({ type: "FeatureCollection", features: [] });
        return;
      }

      // ‚úÖ Set d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã tr√™n b·∫£n ƒë·ªì v√† b·∫£ng
      setGeoData(data.data);
      
      toast.success(`‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t: t√¨m th·∫•y ${data.data.features.length} khu v·ª±c m·∫•t r·ª´ng`, {
        autoClose: 3000
      });

      console.log("‚úÖ D·ª± b√°o t√πy bi·∫øn ho√†n th√†nh:", data.data.features.length, "features");

    } catch (err) {
      console.error("‚ùå L·ªói d·ª± b√°o t√πy bi·∫øn:", err);
      toast.error(`L·ªói khi th·ª±c hi·ªán ph√¢n t√≠ch: ${err.message}`);
    } finally {
      setLoading(false);
      setLoadingState(false);
    }
  };

  // H√†m x·ª≠ l√Ω khi dropdown focus ho·∫∑c blur
  const handleDropdownToggle = (dropdownName, isOpen) => {
    setOpenDropdown(isOpen ? dropdownName : null);
  };
  
  return (
    <div>
      <div
        className="bg-forest-green-primary text-white py-0.2 px-4 rounded-full text-sm font-medium uppercase tracking-wide text-left shadow-md w-full cursor-pointer"
        onClick={() => setIsForecastOpen(!isForecastOpen)}
      >
        D·ª± b√°o m·∫•t r·ª´ng t√πy bi·∫øn
      </div>
      
      {isForecastOpen && (
        <div className="flex flex-col gap-2 pt-3">
          <div
            className="bg-forest-green-gray py-2=0.2 px-3 rounded-md flex justify-between items-center cursor-pointer relative"
            onClick={() => setInputOpen(!isInputOpen)}
          >
            <span className="text-sm font-medium">L·ª±a ch·ªçn ƒë·∫ßu v√†o</span>
            <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
              <Select isOpen={isInputOpen} />
            </div>
          </div>

          {isInputOpen && (
            <div className="flex flex-col gap-2 px-1 pt-1">
              <div className="px-2 ml-8">
                <div className="font-medium text-sm mb-1 ">Khu v·ª±c</div>
                <div className="flex items-center justify-between mb-1 pl-4 ">
                  <label className="text-sm">Huy·ªán</label>
                  <div className="w-36">
                    <DistrictDropdown
                      value={selectedHuyen}
                      onChange={handleHuyenChange}
                      isLoading={loading}
                      disabled={!isAdmin()} // ‚úÖ Lock cho user c·∫•p huy·ªán
                      onFocus={() => handleDropdownToggle("huyen", true)}
                      onBlur={() => handleDropdownToggle("huyen", false)}
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between mb-2 pl-4">
                  <label className="text-sm">X√£</label>
                  <div className="relative w-36">
                    <select
                      value={selectedXa}
                      onChange={handleXaChange}
                      disabled={loading}
                      className="w-full border border-green-400 rounded-md py-0.5 px-2 pr-8 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                      onFocus={() => handleDropdownToggle("xa", true)}
                      onBlur={() => handleDropdownToggle("xa", false)}
                    >
                      <option value="">Ch·ªçn x√£</option>
                      {xaList.map((xa, index) => (
                        <option key={index} value={xa.value}>
                          {xa.label}
                        </option>
                      ))}
                    </select>
                    <Select isOpen={openDropdown === "xa"} />
                  </div>
                </div>

                <div className="font-medium text-sm mb-1">K·ª≥ tr∆∞·ªõc:</div>
                <div className="flex items-center justify-between mb-1 pl-4 relative ">
                  <label className="text-sm">Ng√†y b·∫Øt ƒë·∫ßu</label>
                  <input
                    type="date"
                    value={kyTruocStart}
                    onChange={(e) => setKyTruocStart(e.target.value)}
                    className="w-full border border-green-400 rounded-md py-0.2 pr-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  />
                </div>
                <div className="flex items-center justify-between mb-2 pl-4">
                  <label className="text-sm">Ng√†y k·∫øt th√∫c</label>
                  <input
                    type="date"
                    value={kyTruocEnd}
                    onChange={(e) => setKyTruocEnd(e.target.value)}
                    className="w-full border border-green-400 rounded-md py-0.2 pr-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  />
                </div>
                <div className="font-medium text-sm mb-1">K·ª≥ sau:</div>
                <div className="flex items-center justify-between mb-1 pl-4">
                  <label className="text-sm">Ng√†y b·∫Øt ƒë·∫ßu</label>
                  <input
                    type="date"
                    value={kySauStart}
                    onChange={(e) => setKySauStart(e.target.value)}
                    className="w-full border border-green-400 rounded-md py-0.2 pr-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  />
                </div>
                <div className="flex items-center justify-between mb-2 pl-4">
                  <label className="text-sm">Ng√†y k·∫øt th√∫c</label>
                  <input
                    type="date"
                    value={kySauEnd}
                    onChange={(e) => setKySauEnd(e.target.value)}
                    className="w-full border border-green-400 rounded-md py-0.2 pr-1 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-green-400"
                  />
                </div>
                <div className="font-medium text-sm mb-1">
                  Di·ªán t√≠ch ph√°t hi·ªán t·ªëi thi·ªÉu:
                </div>
              </div>
              <button 
                onClick={handleAnalyze}
                disabled={loading}
                className="w-36 bg-forest-green-gray hover:bg-green-200 text-black-800 font-medium py-0.5 px-3 rounded-full text-center mt-2 self-center disabled:opacity-50"
              >
                {loading ? "ƒêang ph√¢n t√≠ch..." : "Ph√¢n t√≠ch"}
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default DuBaoMatRungTuyBien;