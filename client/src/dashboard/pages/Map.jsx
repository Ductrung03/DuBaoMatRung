import React, { useState, useEffect, useRef } from "react";
import {
  MapContainer,
  TileLayer,
  GeoJSON,
  useMap,
  WMSTileLayer,
} from "react-leaflet";
import { useLocation } from "react-router-dom";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import Table from "./Table";
import { useGeoData } from "../contexts/GeoDataContext";
import { formatDate } from "../../utils/formatDate";
import { ClipLoader } from "react-spinners";
import { toast } from "react-toastify";

// Component hi·ªÉn th·ªã loading overlay
const LoadingOverlay = ({ message }) => (
  <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[1000]">
    <div className="bg-white p-6 rounded-lg shadow-lg max-w-md text-center">
      <ClipLoader color="#027e02" size={50} />
      <p className="mt-4 text-forest-green-primary font-medium">{message}</p>
    </div>
  </div>
);

// Component MapUpdater ƒë·ªÉ x·ª≠ l√Ω zoom ƒë·∫øn v·ªã tr√≠ c·ªßa feature ƒë∆∞·ª£c ch·ªçn t·ª´ b·∫£ng
const MapUpdater = ({ selectedFeature }) => {
  const map = useMap();

  useEffect(() => {
    if (selectedFeature && selectedFeature.geometry) {
      try {
        console.log("MapUpdater: ƒêang c·ªë g·∫Øng zoom ƒë·∫øn feature");
        // T·∫°o layer m·ªõi t·ª´ geometry c·ªßa feature ƒë√£ ch·ªçn
        const geojsonFeature = {
          type: "Feature",
          geometry: selectedFeature.geometry,
          properties: {}
        };
        
        // T·∫°o m·ªôt layer t·∫°m th·ªùi
        const tempLayer = L.geoJSON(geojsonFeature);
        const bounds = tempLayer.getBounds();
        
        if (bounds.isValid()) {
          console.log("MapUpdater: Bounds h·ª£p l·ªá, th·ª±c hi·ªán flyToBounds:", bounds);
          
          // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ ƒë·∫£m b·∫£o map ƒë√£ render xong
          setTimeout(() => {
            map.flyToBounds(bounds, {
              padding: [50, 50],
              duration: 1.0,
              animate: true
            });
          }, 200);
        } else {
          console.warn("MapUpdater: Bounds kh√¥ng h·ª£p l·ªá, th·ª≠ ph∆∞∆°ng √°n kh√°c");
          
          // Ph∆∞∆°ng √°n d·ª± ph√≤ng - zoom ƒë·∫øn t·ªça ƒë·ªô trung t√¢m
          try {
            let centerCoords;
            if (selectedFeature.geometry.type === "MultiPolygon") {
              // L·∫•y t·ªça ƒë·ªô ƒë·∫ßu ti√™n c·ªßa polygon ƒë·∫ßu ti√™n 
              centerCoords = selectedFeature.geometry.coordinates[0][0][0];
              map.setView([centerCoords[1], centerCoords[0]], 16);
              console.log("MapUpdater: ƒê√£ zoom ƒë·∫øn t·ªça ƒë·ªô MultiPolygon:", centerCoords);
            } else if (selectedFeature.geometry.type === "Polygon") {
              centerCoords = selectedFeature.geometry.coordinates[0][0];
              map.setView([centerCoords[1], centerCoords[0]], 16);
              console.log("MapUpdater: ƒê√£ zoom ƒë·∫øn t·ªça ƒë·ªô Polygon:", centerCoords);
            }
          } catch (innerErr) {
            console.error("MapUpdater: L·ªói khi d√πng ph∆∞∆°ng √°n d·ª± ph√≤ng:", innerErr);
          }
        }
      } catch (err) {
        console.error("MapUpdater: L·ªói khi zoom ƒë·∫øn feature:", err);
      }
    }
  }, [selectedFeature, map]);

  return null;
};

// H√†m l·∫•y style cho c√°c layer
const getLayerStyle = (feature, layerType, isSelected = false) => {
  console.log(`üé® Getting style for:`, {
    layerType,
    feature: feature?.properties,
  });

  const baseStyle = {
    weight: 2,
    opacity: 1,
    fillOpacity: 0,
  };

  const selectedStyle = isSelected
    ? {
        weight: 4,
        color: "#ff7800",
        fillOpacity: 0.3,
      }
    : {};

  switch (layerType) {
    case "administrative":
      const boundaryLevel = feature.properties.boundary_level || "unknown";
      console.log(`üîç Boundary level: ${boundaryLevel}`);

      const boundaryStyles = {
        unknown: {
          color: "#ff0000", // ƒê·ªé ƒë·ªÉ d·ªÖ th·∫•y khi debug
          weight: 3,
          dashArray: null,
          opacity: 1,
          fillColor: "transparent",
        },
        huyen: {
          color: "#000000", // ƒêen ƒë·∫≠m - ranh gi·ªõi huy·ªán
          weight: 4,
          dashArray: "15, 10",
          opacity: 1,
          fillColor: "transparent",
        },
        xa: {
          color: "#333333", // X√°m ƒë·∫≠m - ranh gi·ªõi x√£
          weight: 3,
          dashArray: "10, 6",
          opacity: 1,
          fillColor: "transparent",
        },
        tieukhu: {
          color: "#666666", // X√°m v·ª´a - ranh gi·ªõi ti·ªÉu khu
          weight: 2,
          dashArray: "8, 5",
          opacity: 1,
          fillColor: "transparent",
        },
        khoanh: {
          color: "#999999", // X√°m nh·∫°t - ranh gi·ªõi kho·∫£nh
          weight: 1.5,
          dashArray: "5, 4",
          opacity: 0.8,
          fillColor: "transparent",
        },
      };

      const style = boundaryStyles[boundaryLevel] || boundaryStyles["unknown"];

      console.log(`üé® Applied style:`, style);

      return {
        ...baseStyle,
        color: style.color,
        fillColor: style.fillColor,
        weight: style.weight,
        dashArray: style.dashArray,
        opacity: style.opacity,
        fillOpacity: 0,
        ...selectedStyle,
      };

    case "forestTypes":
      // M√†u cho 3 lo·∫°i r·ª´ng
      const forestFunction = feature.properties.forest_function;
      let forestColor = "#38a169"; // M·∫∑c ƒë·ªãnh xanh l√°

      if (forestFunction === "R·ª´ng ƒë·∫∑c d·ª•ng") {
        forestColor = "#e53e3e"; // ƒê·ªè
      } else if (forestFunction === "R·ª´ng ph√≤ng h·ªô") {
        forestColor = "#dd6b20"; // Cam
      } else if (forestFunction === "R·ª´ng s·∫£n xu·∫•t") {
        forestColor = "#38a169"; // Xanh l√°
      }

      return {
        ...baseStyle,
        color: isSelected ? "#ff7800" : "#2d3748",
        fillColor: forestColor,
        weight: isSelected ? 3 : 2,
        opacity: 1,
        fillOpacity: 0.6,
        ...selectedStyle,
      };

    case "forestManagement":
      console.log(`üè¢ Forest Management feature:`, feature.properties);
      
      // M√†u s·∫Øc theo t·ª´ng lo·∫°i ch·ªß qu·∫£n l√Ω - s·ª≠ d·ª•ng m√†u r√µ r√†ng h∆°n
      const chuQuanLy = feature.properties.chuquanly || "";
      let managementColor = "#7c3aed"; // T√≠m m·∫∑c ƒë·ªãnh

      // Ph√¢n lo·∫°i m√†u theo ch·ªß qu·∫£n l√Ω - s·ª≠ d·ª•ng m√†u t∆∞∆°ng t·ª± 3 lo·∫°i r·ª´ng
      if (chuQuanLy.includes("Nh√† n∆∞·ªõc") || chuQuanLy.includes("UBND") || chuQuanLy.includes("Chi c·ª•c")) {
        managementColor = "#dc2626"; // ƒê·ªè - Nh√† n∆∞·ªõc
      } else if (chuQuanLy.includes("C√¥ng ty") || chuQuanLy.includes("Doanh nghi·ªáp")) {
        managementColor = "#ea580c"; // Cam - Doanh nghi·ªáp
      } else if (chuQuanLy.includes("H·ª£p t√°c x√£") || chuQuanLy.includes("HTX")) {
        managementColor = "#d97706"; // V√†ng cam - H·ª£p t√°c x√£
      } else if (chuQuanLy.includes("C√° nh√¢n") || chuQuanLy.includes("H·ªô gia ƒë√¨nh")) {
        managementColor = "#059669"; // Xanh l√° - C√° nh√¢n/H·ªô gia ƒë√¨nh
      } else if (chuQuanLy.includes("C·ªông ƒë·ªìng") || chuQuanLy.includes("Th√¥n")) {
        managementColor = "#0891b2"; // Xanh d∆∞∆°ng - C·ªông ƒë·ªìng
      } else {
        managementColor = "#7c3aed"; // T√≠m - Kh√°c
      }

      return {
        ...baseStyle,
        color: isSelected ? "#ff7800" : "#2d3748", // Gi·ªëng nh∆∞ forestTypes
        fillColor: managementColor,
        weight: isSelected ? 3 : 2,
        opacity: 1,
        fillOpacity: 0.6, // Gi·ªëng nh∆∞ forestTypes
        ...selectedStyle,
      };

    case "terrain":
      // Style cho ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng
      const featureType = feature.properties.feature_type;
      let terrainColor = "#6b7280"; // X√°m m·∫∑c ƒë·ªãnh

      switch (featureType) {
        case "waterway":
          terrainColor = "#3182ce"; // Xanh d∆∞∆°ng cho s√¥ng n∆∞·ªõc
          break;
        case "water_transport":
          terrainColor = "#0987a0"; // Xanh d∆∞∆°ng ƒë·∫≠m cho th·ªßy v·∫≠n
          break;
        case "road":
          terrainColor = "#b7791f"; // N√¢u cho giao th√¥ng
          break;
        default:
          terrainColor = "#6b7280"; // X√°m cho ƒë·ªãa h√¨nh
      }

      return {
        ...baseStyle,
        color: terrainColor,
        fillColor: terrainColor,
        weight: featureType === "road" ? 3 : 2,
        opacity: 1,
        fillOpacity: featureType === "waterway" ? 0.8 : 0.5,
        ...selectedStyle,
      };

    case "forestStatus":
      // Style cho hi·ªán tr·∫°ng r·ª´ng
      return {
        ...baseStyle,
        color: isSelected ? "#ff7800" : "#166534",
        fillColor: "#16a34a", // Xanh l√° ƒë·∫≠m
        weight: isSelected ? 3 : 2,
        opacity: 1,
        fillOpacity: 0.5,
        ...selectedStyle,
      };

    case "deforestation":
      // Style cho d·ª± b√°o m·∫•t r·ª´ng theo m·ª©c ƒë·ªô nghi√™m tr·ªçng
      const alertLevel = feature.properties.alert_level;
      let deforestationColor = "#ea580c"; // Cam m·∫∑c ƒë·ªãnh

      switch (alertLevel) {
        case "critical":
          deforestationColor = "#7f1d1d"; // ƒê·ªè ƒë·∫≠m
          break;
        case "high":
          deforestationColor = "#dc2626"; // ƒê·ªè
          break;
        case "medium":
        default:
          deforestationColor = "#ea580c"; // Cam
          break;
      }

      return {
        ...baseStyle,
        color: isSelected ? "#ff7800" : "#1f2937",
        fillColor: deforestationColor,
        weight: isSelected ? 3 : 2,
        opacity: 1,
        fillOpacity: 0.8,
        ...selectedStyle,
      };

    default:
      return {
        fillColor: getColorByStatus(feature.properties),
        weight: isSelected ? 3 : 2,
        opacity: 1,
        color: isSelected ? "#ff7800" : "#2d3748",
        fillOpacity: 0.7,
      };
  }
};

// H√†m x√¢y d·ª±ng popup content d·ª±a tr√™n lo·∫°i layer
const buildPopupContent = (feature, layerType) => {
  const props = feature.properties;

  let popupContent = `
    <div class="custom-popup">
      <h4 class="popup-title">`;

  switch (layerType) {
    case "administrative":
      const boundaryLevelNames = {
        tinh: "Ranh gi·ªõi t·ªânh",
        huyen: "Ranh gi·ªõi huy·ªán",
        xa: "Ranh gi·ªõi x√£",
        tieukhu: "Ranh gi·ªõi ti·ªÉu khu",
        khoanh: "Ranh gi·ªõi kho·∫£nh",
      };
      popupContent +=
        boundaryLevelNames[props.boundary_level] || "Ranh gi·ªõi h√†nh ch√≠nh";
      break;
    case "forestTypes":
      popupContent +=
        "3 lo·∫°i r·ª´ng - " + (props.forest_function || "Kh√¥ng x√°c ƒë·ªãnh");
      break;
    case "terrain":
      const terrainTypeNames = {
        waterway: "ƒê∆∞·ªùng s√¥ng n∆∞·ªõc",
        water_transport: "Th·ªßy v·∫≠n",
        road: "Giao th√¥ng",
        terrain: "ƒê·ªãa h√¨nh",
      };
      popupContent +=
        terrainTypeNames[props.feature_type] ||
        "ƒê·ªãa h√¨nh - Th·ªßy vƒÉn - Giao th√¥ng";
      break;
    case "forestManagement":
      popupContent += "Ch·ªß qu·∫£n l√Ω r·ª´ng - " + (props.chuquanly || "Kh√¥ng x√°c ƒë·ªãnh");
      break;
    case "forestStatus":
      popupContent += "Hi·ªán tr·∫°ng r·ª´ng";
      break;
    case "deforestation":
      popupContent +=
        "D·ª± b√°o m·∫•t r·ª´ng - " +
        (props.alert_level === "critical"
          ? "Nghi√™m tr·ªçng"
          : props.alert_level === "high"
          ? "Cao"
          : "Trung b√¨nh");
      break;
    default:
      popupContent += "Th√¥ng tin ƒë·ªëi t∆∞·ª£ng";
  }

  popupContent += `</h4><table class="popup-table">`;

  const priorityFieldsByType = {
    administrative: ["boundary_level", "huyen", "xa", "tieukhu", "khoanh"],
    forestTypes: [
      "forest_function", "xa", "tk", "khoanh", "lo", "dtich", "ldlr", "churung"
    ],
    terrain: ["ten", "ma", "feature_type"],
    forestManagement: ["chuquanly", "tt", "gid"],
    forestStatus: ["huyen", "xa", "tk", "khoanh", "churung", "area_ha"],
    deforestation: [
      "area_ha", "start_dau", "end_sau", "alert_level", "days_since"
    ],
    default: [
      "huyen", "xa", "area", "start_dau", "end_sau", "tk", "khoanh", "churung", "mahuyen"
    ],
  };

  const priorityFields =
    priorityFieldsByType[layerType] || priorityFieldsByType.default;

  priorityFields.forEach((field) => {
    if (props[field] !== undefined && props[field] !== null) {
      let value = props[field];
      let label = field;

      if (field === "start_dau" || field === "end_sau") {
        value = formatDate(value);
        label = field === "start_dau" ? "T·ª´ ng√†y" : "ƒê·∫øn ng√†y";
      }

      if ((field === "area" || field === "area_ha") && value !== null) {
        if (field === "area") {
          value = `${(parseFloat(value) / 10000).toFixed(2)} ha`;
        } else {
          value = `${parseFloat(value).toFixed(2)} ha`;
        }
        label = "Di·ªán t√≠ch";
      }

      if (field === "dtich" && value !== null) {
        value = `${parseFloat(value).toFixed(2)} ha`;
        label = "Di·ªán t√≠ch";
      }

      if (field === "boundary_level") {
        const levelNames = {
          tinh: "T·ªânh",
          huyen: "Huy·ªán",
          xa: "X√£",
          tieukhu: "Ti·ªÉu khu",
          khoanh: "Kho·∫£nh",
        };
        value = levelNames[value] || value;
      }

      if (field === "days_since") {
        value = `${value} ng√†y tr∆∞·ªõc`;
        label = "Th·ªùi gian ph√°t hi·ªán";
      }

      const fieldLabels = {
        huyen: "Huy·ªán",
        xa: "X√£",
        tk: "Ti·ªÉu khu",
        khoanh: "Kho·∫£nh",
        churung: "Ch·ªß r·ª´ng",
        mahuyen: "M√£ huy·ªán",
        chuquanly: "Ch·ªß qu·∫£n l√Ω",
        ten: "T√™n",
        ma: "M√£",
        tt: "Th·ª© t·ª±",
        gid: "ID",
        tieukhu: "Ti·ªÉu khu",
        lo: "L√¥",
        dtich: "Di·ªán t√≠ch",
        ldlr: "Lo·∫°i ƒë·∫•t l√¢m nghi·ªáp",
        forest_function: "Ch·ª©c nƒÉng r·ª´ng",
        feature_type: "Lo·∫°i ƒë·ªëi t∆∞·ª£ng",
        alert_level: "M·ª©c c·∫£nh b√°o",
        area_ha: "Di·ªán t√≠ch",
        boundary_level: "C·∫•p ranh gi·ªõi",
      };

      label = fieldLabels[field] || label;

      popupContent += `
        <tr>
          <th>${label}</th>
          <td>${value}</td>
        </tr>
      `;
    }
  });

  // Hi·ªÉn th·ªã c√°c tr∆∞·ªùng c√≤n l·∫°i
  Object.entries(props).forEach(([key, value]) => {
    if (
      !priorityFields.includes(key) &&
      !key.includes("geom") &&
      !key.startsWith("_") &&
      !["x", "y", "x_vn2000", "y_vn2000", "gid", "layer_type"].includes(key) &&
      value !== null &&
      value !== undefined
    ) {
      popupContent += `
        <tr>
          <th>${key}</th>
          <td>${value}</td>
        </tr>
      `;
    }
  });

  popupContent += `</table></div>`;
  return popupContent;
};

// Control ƒë·ªÉ ch·ªçn lo·∫°i b·∫£n ƒë·ªì v√† hi·ªÉn th·ªã legend
const CustomMapControl = ({ setMapType, mapLayers, toggleLayerVisibility }) => {
  const map = useMap();

  useEffect(() => {
    const container = L.DomUtil.create("div");

    // H√†m t·∫°o HTML ƒë·ªông cho legend d·ª±a tr√™n tr·∫°ng th√°i c√°c layer
    const createLegendHTML = () => {
      return `
      <div class="map-legend-control" style="
        position: relative;
        z-index: 1000;
        background: white;
        border: 2px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        max-width: 300px;
        font-family: Arial, sans-serif;
        font-size: 12px;
      ">
        <!-- Header -->
        <div style="
          background: #f8f9fa;
          padding: 8px 12px;
          border-bottom: 1px solid #ddd;
          border-radius: 6px 6px 0 0;
          display: flex;
          align-items: center;
          cursor: pointer;
        " id="legend-header">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-right: 8px;">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V6.618a1 1 0 01.553-.894L9 3l6 3 6-3v13l-6 3-6-3z" />
          </svg>
          <span style="font-weight: bold; color: #333;">L·ªõp b·∫£n ƒë·ªì</span>
          <svg id="toggle-arrow" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(0deg); transition: transform 0.3s;">
            <polyline points="6,9 12,15 18,9"></polyline>
          </svg>
        </div>

        <!-- Content -->
        <div id="legend-content" style="max-height: 500px; overflow-y: auto;">
          
          <!-- Ch·ªçn lo·∫°i b·∫£n ƒë·ªì n·ªÅn -->
          <div class="legend-section" style="padding: 8px 12px; border-bottom: 1px solid #eee;">
            <div style="font-weight: bold; margin-bottom: 6px; color: #555;">B·∫£n ƒë·ªì n·ªÅn</div>
            <div style="display: flex; gap: 8px;">
              <button class="map-type-btn" data-type="normal" style="
                flex: 1;
                padding: 4px 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                cursor: pointer;
                font-size: 11px;
                transition: all 0.2s;
              ">üó∫Ô∏è B·∫£n ƒë·ªì th∆∞·ªùng</button>
              <button class="map-type-btn active" data-type="satellite" style="
                flex: 1;
                padding: 4px 8px;
                border: 1px solid #007bff;
                border-radius: 4px;
                background: #e3f2fd;
                cursor: pointer;
                font-size: 11px;
                transition: all 0.2s;
              ">üõ∞Ô∏è B·∫£n ƒë·ªì v·ªá tinh</button>
            </div>
          </div>

          <!-- L·ªõp ranh gi·ªõi h√†nh ch√≠nh - CH·ªà HI·ªÇN TH·ªä KHI C√ì D·ªÆ LI·ªÜU -->
          ${mapLayers.administrative?.data ? `
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              border-bottom: 1px solid #eee;
              background: #f8f9fa;
            " data-section="administrative">
              <input type="checkbox" id="administrative-checkbox" ${
                mapLayers.administrative?.visible ? "checked" : ""
              } style="margin-right: 8px;">
              <span style="color: #1a365d;">üèõÔ∏è</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp ranh gi·ªõi h√†nh ch√≠nh</span>
              <span style="margin-left: 8px; font-size: 10px; color: #666;">(${mapLayers.administrative.data.features?.length || 0})</span>
              <svg class="section-arrow" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(0deg); transition: transform 0.3s;">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
            <div class="section-content" style="padding: 6px 12px; padding-left: 32px;">
              <div style="display: flex; align-items: center; margin-bottom: 4px;">
                <div style="width: 24px; height: 4px; background: #000000; margin-right: 8px; border: none;"></div>
                <span style="font-size: 11px; font-weight: 500;">Ranh gi·ªõi huy·ªán</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 4px;">
                <svg width="24" height="4" style="margin-right: 8px;">
                  <line x1="0" y1="2" x2="24" y2="2" stroke="#333333" stroke-width="2" stroke-dasharray="4,2"/>
                </svg>
                <span style="font-size: 11px;">Ranh gi·ªõi x√£</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 4px;">
                <svg width="24" height="4" style="margin-right: 8px;">
                  <line x1="0" y1="2" x2="24" y2="2" stroke="#666666" stroke-width="1.5" stroke-dasharray="3,2"/>
                </svg>
                <span style="font-size: 11px;">Ranh gi·ªõi ti·ªÉu khu</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <svg width="24" height="4" style="margin-right: 8px;">
                  <line x1="0" y1="2" x2="24" y2="2" stroke="#999999" stroke-width="1" stroke-dasharray="2,2"/>
                </svg>
                <span style="font-size: 11px;">Ranh gi·ªõi kho·∫£nh</span>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- L·ªõp 3 lo·∫°i r·ª´ng - CH·ªà HI·ªÇN TH·ªä KHI C√ì D·ªÆ LI·ªÜU -->
          ${mapLayers.forestTypes?.data ? `
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              border-bottom: 1px solid #eee;
            " data-section="forest-types">
              <input type="checkbox" id="forest-types-checkbox" ${
                mapLayers.forestTypes?.visible ? "checked" : ""
              } style="margin-right: 8px;">
              <span style="color: #38a169;">üå≤</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp 3 lo·∫°i r·ª´ng</span>
              <span style="margin-left: 8px; font-size: 10px; color: #666;">(${mapLayers.forestTypes.data.features?.length || 0})</span>
              <svg class="section-arrow" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(-90deg); transition: transform 0.3s;">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
            <div class="section-content" style="padding: 6px 12px; padding-left: 32px; display: none;">
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #dc2626; margin-right: 8px; border-radius: 2px; border: 1px solid #991b1b;"></div>
                <span style="font-weight: 500; color: #dc2626;">R·ª´ng ƒë·∫∑c d·ª•ng</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #16a34a; margin-right: 8px; border-radius: 2px; border: 1px solid #15803d;"></div>
                <span style="font-weight: 500; color: #16a34a;">R·ª´ng s·∫£n xu·∫•t</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #6b7280; margin-right: 8px; border-radius: 2px; border: 1px solid #4b5563;"></div>
                <span style="color: #6b7280;">Kh√¥ng x√°c ƒë·ªãnh</span>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- L·ªõp ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng - CH·ªà HI·ªÇN TH·ªä KHI C√ì D·ªÆ LI·ªÜU -->
          ${mapLayers.terrain?.data ? `
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              border-bottom: 1px solid #eee;
            " data-section="terrain">
              <input type="checkbox" id="terrain-checkbox" ${
                mapLayers.terrain?.visible ? "checked" : ""
              } style="margin-right: 8px;">
              <span style="color: #3182ce;">üèîÔ∏è</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp ƒë·ªãa h√¨nh, th·ªßy vƒÉn, giao th√¥ng</span>
              <span style="margin-left: 8px; font-size: 10px; color: #666;">(${mapLayers.terrain.data.features?.length || 0})</span>
              <svg class="section-arrow" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(-90deg); transition: transform 0.3s;">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
            <div class="section-content" style="padding: 6px 12px; padding-left: 32px; display: none;">
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 20px; height: 3px; background: #3182ce; margin-right: 8px;"></div>
                <span style="font-weight: 500;">ƒê∆∞·ªùng s√¥ng n∆∞·ªõc</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 20px; height: 2px; background: #0987a0; margin-right: 8px;"></div>
                <span>Th·ªßy v·∫≠n</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 20px; height: 4px; background: #b7791f; margin-right: 8px;"></div>
                <span style="font-weight: 500;">Giao th√¥ng</span>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng - CH·ªà HI·ªÇN TH·ªä KHI C√ì D·ªÆ LI·ªÜU -->
          ${mapLayers.forestManagement?.data ? `
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              border-bottom: 1px solid #eee;
            " data-section="forest-management">
              <input type="checkbox" id="forest-management-checkbox" ${
                mapLayers.forestManagement?.visible ? "checked" : ""
              } style="margin-right: 8px;">
              <span style="color: #7c3aed;">üè¢</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp ch·ªß qu·∫£n l√Ω r·ª´ng</span>
              <span style="margin-left: 8px; font-size: 10px; color: #666;">(${mapLayers.forestManagement.data.features?.length || 0})</span>
              <svg class="section-arrow" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(-90deg); transition: transform 0.3s;">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
            <div class="section-content" style="padding: 6px 12px; padding-left: 32px; display: none;">
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #dc2626; margin-right: 8px; border-radius: 2px; border: 1px solid #991b1b;"></div>
                <span style="font-weight: 500; color: #dc2626;">Nh√† n∆∞·ªõc</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #ea580c; margin-right: 8px; border-radius: 2px; border: 1px solid #c2410c;"></div>
                <span style="font-weight: 500; color: #ea580c;">Doanh nghi·ªáp</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #d97706; margin-right: 8px; border-radius: 2px; border: 1px solid #a16207;"></div>
                <span style="font-weight: 500; color: #d97706;">H·ª£p t√°c x√£</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #059669; margin-right: 8px; border-radius: 2px; border: 1px solid #047857;"></div>
                <span style="font-weight: 500; color: #059669;">C√° nh√¢n/H·ªô gia ƒë√¨nh</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #0891b2; margin-right: 8px; border-radius: 2px; border: 1px solid #0e7490;"></div>
                <span style="font-weight: 500; color: #0891b2;">C·ªông ƒë·ªìng</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #7c3aed; margin-right: 8px; border-radius: 2px; border: 1px solid #5b21b6;"></div>
                <span style="color: #7c3aed;">Kh√°c</span>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- L·ªõp hi·ªán tr·∫°ng r·ª´ng - CH·ªà HI·ªÇN TH·ªä KHI C√ì D·ªÆ LI·ªÜU -->
          ${mapLayers.forestStatus?.data ? `
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
              border-bottom: 1px solid #eee;
            " data-section="forest-status">
              <input type="checkbox" id="forest-status-checkbox" ${
                mapLayers.forestStatus?.visible ? "checked" : ""
              } style="margin-right: 8px;">
              <span style="color: #166534;">üåø</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp hi·ªán tr·∫°ng r·ª´ng</span>
              <span style="margin-left: 8px; font-size: 10px; color: #666;">(${mapLayers.forestStatus.data.features?.length || 0})</span>
            </div>
          </div>
          ` : ''}

          <!-- L·ªõp d·ª± b√°o m·∫•t r·ª´ng - LU√îN HI·ªÇN TH·ªä -->
          <div class="legend-section">
            <div class="section-header" style="
              padding: 8px 12px;
              cursor: pointer;
              display: flex;
              align-items: center;
            " data-section="deforestation">
              <input type="checkbox" checked style="margin-right: 8px;" disabled>
              <span style="color: #dc2626;">‚ö†Ô∏è</span>
              <span style="margin-left: 6px; font-weight: 500;">L·ªõp d·ª± b√°o m·∫•t r·ª´ng m·ªõi nh·∫•t</span>
              <svg class="section-arrow" width="10" height="10" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-left: auto; transform: rotate(-90deg); transition: transform 0.3s;">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </div>
            <div class="section-content" style="padding: 6px 12px; padding-left: 32px; display: none;">
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #7f1d1d; margin-right: 8px; border-radius: 2px; border: 1px solid #7f1d1d;"></div>
                <span style="color: #7f1d1d; font-weight: 600;">Nghi√™m tr·ªçng (< 7 ng√†y)</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #dc2626; margin-right: 8px; border-radius: 2px; border: 1px solid #dc2626;"></div>
                <span style="color: #dc2626; font-weight: 600;">Cao (< 30 ng√†y)</span>
              </div>
              <div style="display: flex; align-items: center; margin-bottom: 3px;">
                <div style="width: 16px; height: 16px; background: #ea580c; margin-right: 8px; border-radius: 2px; border: 1px solid #ea580c;"></div>
                <span style="color: #ea580c; font-weight: 600;">Trung b√¨nh (> 30 ng√†y)</span>
              </div>
            </div>
          </div>

          <!-- Th√¥ng b√°o n·∫øu ch∆∞a c√≥ layer n√†o ƒë∆∞·ª£c t·∫£i -->
          ${!mapLayers.administrative?.data && !mapLayers.forestTypes?.data && !mapLayers.terrain?.data && !mapLayers.forestManagement?.data && !mapLayers.forestStatus?.data ? `
          <div style="padding: 16px 12px; text-align: center; color: #666; font-style: italic;">
            <div style="margin-bottom: 8px;">üìÇ Ch∆∞a c√≥ l·ªõp d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i</div>
            <div style="font-size: 10px;">S·ª≠ d·ª•ng menu b√™n tr√°i ƒë·ªÉ t·∫£i c√°c l·ªõp d·ªØ li·ªáu</div>
          </div>
          ` : ''}
        </div>
      </div>
    `;
    };

    // T·∫°o HTML ban ƒë·∫ßu
    container.innerHTML = createLegendHTML();
    container.className = "leaflet-control leaflet-bar";

    // H√†m c·∫≠p nh·∫≠t l·∫°i legend khi mapLayers thay ƒë·ªïi
    const updateLegend = () => {
      container.innerHTML = createLegendHTML();
      setupEventListeners();
    };

    // H√†m setup event listeners
    const setupEventListeners = () => {
      const legendHeader = container.querySelector("#legend-header");
      const legendContent = container.querySelector("#legend-content");
      const toggleArrow = container.querySelector("#toggle-arrow");
      let isExpanded = true;

      // Toggle legend visibility
      if (legendHeader) {
        legendHeader.onclick = (e) => {
          e.preventDefault();
          isExpanded = !isExpanded;
          if (isExpanded) {
            legendContent.style.display = "block";
            toggleArrow.style.transform = "rotate(0deg)";
          } else {
            legendContent.style.display = "none";
            toggleArrow.style.transform = "rotate(-90deg)";
          }
        };
      }

      // Map type selection
      container.querySelectorAll(".map-type-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          const type = btn.getAttribute("data-type");

          // Update button styles
          container.querySelectorAll(".map-type-btn").forEach((b) => {
            b.style.border = "1px solid #ddd";
            b.style.background = "white";
            b.classList.remove("active");
          });

          btn.style.border = "1px solid #007bff";
          btn.style.background = "#e3f2fd";
          btn.classList.add("active");

          setMapType(type);
        });
      });

      // Section toggle functionality
      container.querySelectorAll(".section-header").forEach((header) => {
        const arrow = header.querySelector(".section-arrow");
        if (arrow) {
          header.addEventListener("click", (e) => {
            e.preventDefault();
            const content = header.nextElementSibling;
            const isVisible = content.style.display !== "none";

            if (isVisible) {
              content.style.display = "none";
              arrow.style.transform = "rotate(-90deg)";
            } else {
              content.style.display = "block";
              arrow.style.transform = "rotate(0deg)";
            }
          });
        }
      });

      // Checkbox functionality - Layer visibility toggle
      const layerCheckboxes = {
        "administrative-checkbox": "administrative",
        "forest-types-checkbox": "forestTypes",
        "terrain-checkbox": "terrain",
        "forest-management-checkbox": "forestManagement",
        "forest-status-checkbox": "forestStatus",
      };

      Object.entries(layerCheckboxes).forEach(([checkboxId, layerKey]) => {
        const checkbox = container.querySelector(`#${checkboxId}`);
        if (checkbox) {
          checkbox.addEventListener("change", (e) => {
            e.stopPropagation();
            console.log(
              `üîÑ Toggle layer: ${layerKey}, checked: ${checkbox.checked}`
            );
            toggleLayerVisibility(layerKey);
          });
        }
      });
    };

    // Setup event listeners l·∫ßn ƒë·∫ßu
    setupEventListeners();

    const CustomControl = L.Control.extend({
      onAdd: () => container,
      onRemove: () => {},
    });

    const control = new CustomControl({ position: "topright" });
    map.addControl(control);

    // Cleanup
    return () => {
      map.removeControl(control);
    };
  }, [map, setMapType, mapLayers, toggleLayerVisibility]);

  return null;
};

// Helper function ƒë·ªÉ l·∫•y query param t·ª´ URL
const getQueryParam = (search, key) => {
  const params = new URLSearchParams(search);
  return params.get(key);
};

// H√†m x√°c ƒë·ªãnh m√†u cho feature d·ª±a theo tr·∫°ng th√°i (cho d·ªØ li·ªáu m·∫•t r·ª´ng t·ª´ geoData)
const getColorByStatus = (properties) => {
  // N·∫øu c√≥ tr·∫°ng th√°i x√°c minh
  if (properties.detection_status) {
    switch (properties.detection_status) {
      case "Ch∆∞a x√°c minh":
        return "#ff7f00"; // Cam
      case "ƒêang x√°c minh":
        return "#ffff00"; // V√†ng
      case "ƒê√£ x√°c minh":
        return "#ff0000"; // ƒê·ªè
      case "Kh√¥ng x√°c minh ƒë∆∞·ª£c":
        return "#808080"; // X√°m
      default:
        return "#3388ff"; // Xanh m·∫∑c ƒë·ªãnh
    }
  }

  // Ph√¢n lo·∫°i theo th·ªùi gian n·∫øu kh√¥ng c√≥ tr·∫°ng th√°i
  const today = new Date();
  if (properties.end_sau) {
    const endDate = new Date(properties.end_sau);
    const daysDiff = Math.floor((today - endDate) / (1000 * 60 * 60 * 24));

    if (daysDiff < 30) return "#ff0000"; // ƒê·ªè - m·ªõi nh·∫•t (trong 30 ng√†y)
    else if (daysDiff < 90) return "#ff7f00"; // Cam - trong 90 ng√†y
    else if (daysDiff < 180) return "#ffff00"; // V√†ng - trong 180 ng√†y
    else return "#808080"; // X√°m - c≈© h∆°n 180 ng√†y
  }

  return "#3388ff"; // Xanh m·∫∑c ƒë·ªãnh
};

// H√†m chuy·ªÉn ƒë·ªïi di·ªán t√≠ch th√†nh s·ªë
const parseArea = (areaValue) => {
  if (areaValue === null || areaValue === undefined) return null;
  
  // N·∫øu l√† chu·ªói c√≥ ch·ª©a "ha"
  if (typeof areaValue === 'string' && areaValue.includes('ha')) {
    return parseFloat(areaValue.replace(/[^0-9.,]/g, '').replace(',', '.'));
  }
  
  // N·∫øu l√† s·ªë ho·∫∑c chu·ªói s·ªë
  return parseFloat(String(areaValue).replace(',', '.'));
};

// Component ch√≠nh
const Map = () => {
  const { geoData, loading, mapLayers, toggleLayerVisibility } = useGeoData();
  const [mapType, setMapType] = useState("satellite");
  const [mapReady, setMapReady] = useState(false);
  const location = useLocation();
  const isDataPage = location.pathname === "/dashboard/quanlydulieu";
  const [selectedFeature, setSelectedFeature] = useState(null);
  const [selectedRowFeature, setSelectedRowFeature] = useState(null);
  const [highlightedLayerRef, setHighlightedLayerRef] = useState(null);
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [loadingMessage, setLoadingMessage] = useState("");
  const geoJsonLayerRef = useRef(null);

  const layerName = getQueryParam(location.search, "layer");

  // Debug geoData ƒë·ªÉ ki·ªÉm tra n√≥ nh·∫≠n ƒë∆∞·ª£c g√¨ t·ª´ backend
  useEffect(() => {
    if (geoData) {
      console.log("D·ªØ li·ªáu GeoJSON nh·∫≠n ƒë∆∞·ª£c:", geoData);
      console.log("S·ªë l∆∞·ª£ng features:", geoData.features?.length || 0);
      if (geoData.features && geoData.features.length > 0) {
        console.log("Feature ƒë·∫ßu ti√™n:", geoData.features[0]);
      }
    }
  }, [geoData]);

  // H√†m t·ªëi ∆∞u ƒë·ªÉ x·ª≠ l√Ω khi click v√†o m·ªôt h√†ng trong b·∫£ng
  const handleRowClick = (row) => {
    setLoadingDetails(true);
    setLoadingMessage("ƒêang t√¨m v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì...");
    
    console.log("ƒê√£ click v√†o h√†ng:", row);
    console.log("Chi ti·∫øt d√≤ng ƒë√£ ch·ªçn:", JSON.stringify(row, null, 2));
    
    // Ki·ªÉm tra d·ªØ li·ªáu GeoJSON
    if (!geoData || !geoData.features || geoData.features.length === 0) {
      console.error("Kh√¥ng c√≥ d·ªØ li·ªáu GeoJSON ho·∫∑c d·ªØ li·ªáu r·ªóng");
      setLoadingDetails(false);
      return;
    }
    
    console.log("T·ªïng s·ªë features:", geoData.features.length);
    
    try {
      // Chu·∫©n b·ªã c√°c gi√° tr·ªã ƒë·ªÉ so s√°nh
      const rowArea = parseArea(row.area);
      const rowTk = row.tk;
      const rowKhoanh = row.khoanh;
      const rowMahuyen = row.mahuyen;
      const rowXa = row.xa;
      const rowStartDau = row.start_dau;
      const rowEndSau = row.end_sau;
      
      console.log(`T√¨m feature v·ªõi: TK=${rowTk}, Kho·∫£nh=${rowKhoanh}, Di·ªán t√≠ch=${rowArea}, M√£ huy·ªán=${rowMahuyen}, T·ª´=${rowStartDau}, ƒê·∫øn=${rowEndSau}`);
      
      // T·∫°o ID ·∫£o ƒë·ªÉ ph√¢n bi·ªát c√°c feature
      const createVirtualId = (props) => {
        return `${props.tk || ''}|${props.khoanh || ''}|${props.area || ''}|${props.start_dau || ''}|${props.end_sau || ''}`;
      };
      
      const rowVirtualId = createVirtualId(row);
      console.log("ID ·∫£o c·ªßa d√≤ng:", rowVirtualId);
      
      // T√¨m feature kh·ªõp ch√≠nh x√°c nh·∫•t
      let matchedFeature = null;
      let bestMatchScore = -1;
      
      // Gi·∫£ l·∫≠p qu√° tr√¨nh t√¨m ki·∫øm ƒë·ªÉ hi·ªÉn th·ªã loading
      setTimeout(() => {
        setLoadingMessage("Ph√¢n t√≠ch d·ªØ li·ªáu...");
      }, 300);
      
      setTimeout(() => {
        setLoadingMessage("ƒêang x√°c ƒë·ªãnh v·ªã tr√≠...");
      }, 600);
      
      // Duy·ªát qua t·ª´ng feature ƒë·ªÉ t√¨m kh·ªõp nh·∫•t
      for (let i = 0; i < geoData.features.length; i++) {
        const feature = geoData.features[i];
        const props = feature.properties;
        const featureArea = parseArea(props.area);
        
        // T√≠nh ƒëi·ªÉm kh·ªõp cho feature n√†y
        let matchScore = 0;
        
        // Kh·ªõp theo ti·ªÉu khu (tr·ªçng s·ªë cao)
        if (rowTk && props.tk && rowTk === props.tk) {
          matchScore += 5;
        }
        
        // Kh·ªõp theo kho·∫£nh (tr·ªçng s·ªë cao)
        if (rowKhoanh && props.khoanh && rowKhoanh === props.khoanh) {
          matchScore += 5;
        }
        
        // Kh·ªõp theo di·ªán t√≠ch (v·ªõi ƒë·ªô ch√≠nh x√°c cao)
        if (rowArea && featureArea && Math.abs(rowArea - featureArea) < 0.05) {
          matchScore += 10 - Math.abs(rowArea - featureArea) * 100; // ƒêi·ªÉm cao h∆°n cho kh·ªõp ch√≠nh x√°c h∆°n
        }
        
        // Kh·ªõp theo m√£ huy·ªán
        if (rowMahuyen && props.mahuyen && rowMahuyen === props.mahuyen) {
          matchScore += 3;
        }
        
        // Kh·ªõp theo x√£
        if (rowXa && props.xa && rowXa === props.xa) {
          matchScore += 3;
        }
        
        // Kh·ªõp theo th·ªùi gian
        if (rowStartDau && props.start_dau && rowStartDau === props.start_dau) {
          matchScore += 2;
        }
        
        if (rowEndSau && props.end_sau && rowEndSau === props.end_sau) {
          matchScore += 2;
        }
        
        // So s√°nh ID ·∫£o (tr·ªçng s·ªë r·∫•t cao)
        const featureVirtualId = createVirtualId(props);
        if (rowVirtualId === featureVirtualId) {
          matchScore += 20;
        }
        
        // Ki·ªÉm tra n·∫øu feature n√†y kh·ªõp t·ªët h∆°n
        if (matchScore > bestMatchScore) {
          bestMatchScore = matchScore;
          matchedFeature = feature;
          console.log(`Feature #${i} c√≥ ƒëi·ªÉm kh·ªõp: ${matchScore}, hi·ªán l√† feature t·ªët nh·∫•t`);
        }
      }
      
      setTimeout(() => {
        if (matchedFeature) {
          console.log("T√¨m th·∫•y feature kh·ªõp t·ªët nh·∫•t v·ªõi ƒëi·ªÉm:", bestMatchScore);
          console.log("Feature:", matchedFeature);
          
          // ƒê√°nh d·∫•u feature ƒë∆∞·ª£c ch·ªçn
          setSelectedFeature(matchedFeature);
          setSelectedRowFeature(matchedFeature);
          
          // Th·ª±c hi·ªán zoom ƒë·∫øn feature
          if (window._leaflet_map) {
            try {
              // Reset style cho feature ƒë∆∞·ª£c highlight tr∆∞·ªõc ƒë√≥
              if (highlightedLayerRef && geoJsonLayerRef.current) {
                geoJsonLayerRef.current.resetStyle(highlightedLayerRef);
              }
              
              // Highlight feature m·ªõi tr√™n b·∫£n ƒë·ªì
              if (geoJsonLayerRef.current) {
                let newHighlightedLayer = null;
                
                geoJsonLayerRef.current.eachLayer(layer => {
                  if (layer.feature === matchedFeature) {
                    layer.setStyle({
                      weight: 3,
                      color: '#ff7800',
                      opacity: 1,
                      fillOpacity: 0.7
                    });
                    layer.bringToFront();
                    newHighlightedLayer = layer;
                    
                    // M·ªü popup n·∫øu c√≥
                    if (layer.getPopup) {
                      layer.openPopup();
                    }
                  }
                });
                
                setHighlightedLayerRef(newHighlightedLayer);
              }
              
              // Ho√†n th√†nh qu√° tr√¨nh t√¨m ki·∫øm
              setLoadingDetails(false);
            } catch (error) {
              console.error("L·ªói khi zoom:", error);
              setLoadingDetails(false);
            }
          } else {
            console.error("Map ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
            setLoadingDetails(false);
          }
        } else {
          console.error("Kh√¥ng t√¨m th·∫•y feature t∆∞∆°ng ·ª©ng");
          toast.error("Kh√¥ng th·ªÉ t√¨m th·∫•y v·ªã tr√≠ ch√≠nh x√°c tr√™n b·∫£n ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn m·ª•c kh√°c.");
          setLoadingDetails(false);
        }
      }, 1000); // ƒê·ª£i 1 gi√¢y ƒë·ªÉ gi·∫£ l·∫≠p qu√° tr√¨nh t√¨m ki·∫øm
    } catch (error) {
      console.error("L·ªói x·ª≠ l√Ω s·ª± ki·ªán click b·∫£ng:", error);
      setLoadingDetails(false);
    }
  };

  // X·ª≠ l√Ω cho m·ªói feature tr√™n b·∫£n ƒë·ªì
  const onEachFeature = (feature, layer, layerType) => {
    if (feature.properties) {
      const popupContent = buildPopupContent(feature, layerType);
      layer.bindPopup(popupContent, {
        maxWidth: 300,
        className: "custom-popup-container",
      });
    }

    layer.on("mouseover", function () {
      const currentStyle = getLayerStyle(this.feature, layerType, false);
      this.setStyle({
        ...currentStyle,
        weight: currentStyle.weight + 1,
        color: "#ff7800",
        fillOpacity: Math.min(currentStyle.fillOpacity + 0.2, 1),
      });
      this.bringToFront();
    });

    layer.on("mouseout", function () {
      if (!selectedFeature || this.feature !== selectedFeature) {
        const originalStyle = getLayerStyle(this.feature, layerType, false);
        this.setStyle(originalStyle);
      }
    });

    layer.on("click", () => {
      setSelectedFeature(feature);
    });
  };

  // Zoom t·ªõi feature khi map v√† data s·∫µn s√†ng
  useEffect(() => {
    if (mapReady && geoData?.features?.length > 0 && window._leaflet_map) {
      try {
        console.log("C·ªë g·∫Øng zoom ƒë·∫øn d·ªØ li·ªáu...");
        const geoJsonLayer = L.geoJSON(geoData);
        const bounds = geoJsonLayer.getBounds();

        if (bounds.isValid()) {
          console.log("Bounds h·ª£p l·ªá:", bounds);
          window._leaflet_map.fitBounds(bounds, { padding: [20, 20] });
        } else {
          console.log("Bounds kh√¥ng h·ª£p l·ªá t·ª´ GeoJSON");
        }
      } catch (err) {
        console.error("L·ªói khi zoom ƒë·∫øn d·ªØ li·ªáu:", err);
      }
    }
  }, [mapReady, geoData]);

  return (
    <div className="p-2 md:p-5 font-sans relative">
      <h2 className="text-center text-lg md:text-xl font-bold mb-2 md:mb-5">
        B·∫£n ƒë·ªì khu v·ª±c
      </h2>

      <div
        className={`flex justify-center items-center ${
          isDataPage ? "mb-2 md:mb-5" : ""
        } relative`}
      >
        {/* Loading overlay for map */}
        {loading && (
          <div className="absolute inset-0 bg-white bg-opacity-70 flex items-center justify-center z-10">
            <div className="bg-white p-4 rounded-lg shadow-lg flex flex-col items-center">
              <ClipLoader color="#027e02" size={40} />
              <p className="mt-2 text-forest-green-primary">
                ƒêang t·∫£i d·ªØ li·ªáu b·∫£n ƒë·ªì...
              </p>
            </div>
          </div>
        )}

        <MapContainer
          center={[22.1702, 104.1225]} // Center t·ªânh L√†o Cai
          zoom={8}
          className={`w-full rounded-xl shadow-lg ${
            isDataPage
              ? "h-[40vh] md:h-[50vh]"
              : "h-[50vh] md:h-[calc(100vh-150px)]"
          }`}
          whenCreated={(mapInstance) => {
            console.log("Map ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o");
            window._leaflet_map = mapInstance;
            setTimeout(() => {
              setMapReady(true);
              console.log("Map ƒë√£ s·∫µn s√†ng");
            }, 500);
          }}
        >
          {mapType === "normal" ? (
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          ) : (
            <>
              <TileLayer url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}" />
              <TileLayer url="https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}" />
            </>
          )}

          {/* Component ƒë·ªÉ x·ª≠ l√Ω vi·ªác bay ƒë·∫øn feature ƒë∆∞·ª£c ch·ªçn t·ª´ b·∫£ng */}
          <MapUpdater selectedFeature={selectedRowFeature} />

          {layerName ? (
            <WMSTileLayer
              url="http://localhost:8080/geoserver/rung/wms"
              layers={layerName}
              format="image/png"
              transparent={true}
              version="1.1.0"
              attribution="GeoServer"
            />
          ) : (
            <>
              {/* Hi·ªÉn th·ªã c√°c layer theo th·ª© t·ª± t·ª´ d∆∞·ªõi l√™n tr√™n - ƒë·ªÉ ranh gi·ªõi h√†nh ch√≠nh hi·ªÉn th·ªã r√µ nh·∫•t */}

              {/* Layer hi·ªán tr·∫°ng r·ª´ng (d∆∞·ªõi c√πng) */}
              {mapLayers.forestStatus?.data &&
                mapLayers.forestStatus.visible && (
                  <GeoJSON
                    key={`forest-status-${Date.now()}`}
                    data={mapLayers.forestStatus.data}
                    onEachFeature={(feature, layer) =>
                      onEachFeature(feature, layer, "forestStatus")
                    }
                    style={(feature) =>
                      getLayerStyle(
                        feature,
                        "forestStatus",
                        selectedFeature === feature
                      )
                    }
                  />
                )}

              {/* Layer ch·ªß qu·∫£n l√Ω r·ª´ng */}
              {mapLayers.forestManagement?.data &&
                mapLayers.forestManagement.visible && (
                  <GeoJSON
                    key={`forest-management-${Date.now()}`}
                    data={mapLayers.forestManagement.data}
                    onEachFeature={(feature, layer) =>
                      onEachFeature(feature, layer, "forestManagement")
                    }
                    style={(feature) =>
                      getLayerStyle(
                        feature,
                        "forestManagement",
                        selectedFeature === feature
                      )
                    }
                  />
                )}

              {/* Layer 3 lo·∫°i r·ª´ng */}
              {mapLayers.forestTypes?.data && mapLayers.forestTypes.visible && (
                <GeoJSON
                  key={`forest-types-${Date.now()}`}
                  data={mapLayers.forestTypes.data}
                  onEachFeature={(feature, layer) =>
                    onEachFeature(feature, layer, "forestTypes")
                  }
                  style={(feature) =>
                    getLayerStyle(
                      feature,
                      "forestTypes",
                      selectedFeature === feature
                    )
                  }
                />
              )}

              {/* Layer ƒë·ªãa h√¨nh */}
              {mapLayers.terrain?.data && mapLayers.terrain.visible && (
                <GeoJSON
                  key={`terrain-${Date.now()}`}
                  data={mapLayers.terrain.data}
                  onEachFeature={(feature, layer) =>
                    onEachFeature(feature, layer, "terrain")
                  }
                  style={(feature) =>
                    getLayerStyle(
                      feature,
                      "terrain",
                      selectedFeature === feature
                    )
                  }
                />
              )}

              {/* Layer d·ª± b√°o m·∫•t r·ª´ng t·ª´ geoData - HI·ªÇN TH·ªä CH√çNH */}
              {geoData?.type === "FeatureCollection" &&
                geoData.features?.length > 0 && (
                  <GeoJSON
                    key={`deforestation-${Date.now()}`}
                    data={geoData}
                    onEachFeature={(feature, layer) => {
                      if (feature.properties) {
                        // X√¢y d·ª±ng HTML popup cho d·ª± b√°o m·∫•t r·ª´ng
                        let popupContent = `
                        <div class="custom-popup">
                          <h4 class="popup-title">Th√¥ng tin ƒë·ªëi t∆∞·ª£ng</h4>
                          <table class="popup-table">
                        `;

                        // C√°c tr∆∞·ªùng quan tr·ªçng hi·ªÉn th·ªã ƒë·∫ßu ti√™n
                        const priorityFields = [
                          "huyen", "xa", "area", "start_dau", "end_sau", 
                          "tk", "khoanh", "churung", "mahuyen"
                        ];

                        // X·ª≠ l√Ω c√°c tr∆∞·ªùng ∆∞u ti√™n tr∆∞·ªõc
                        priorityFields.forEach((field) => {
                          if (feature.properties[field] !== undefined) {
                            let value = feature.properties[field];
                            let label = field;

                            // ƒê·ªãnh d·∫°ng ng√†y th√°ng
                            if (field === "start_dau" || field === "end_sau") {
                              value = formatDate(value);
                              label = field === "start_dau" ? "T·ª´ ng√†y" : "ƒê·∫øn ng√†y";
                            }

                            // ƒê·ªãnh d·∫°ng di·ªán t√≠ch
                            if (field === "area" && value !== null) {
                              value = `${(parseFloat(value) / 10000).toFixed(2)} ha`;
                              label = "Di·ªán t√≠ch";
                            }

                            // ƒê·ªïi t√™n hi·ªÉn th·ªã c√°c tr∆∞·ªùng
                            if (field === "huyen") label = "Huy·ªán";
                            if (field === "xa") label = "X√£";
                            if (field === "tk") label = "Ti·ªÉu khu";
                            if (field === "khoanh") label = "Kho·∫£nh";
                            if (field === "churung") label = "Ch·ªß r·ª´ng";
                            if (field === "mahuyen") label = "M√£ huy·ªán";

                            popupContent += `
                            <tr>
                              <th>${label}</th>
                              <td>${value !== null ? value : "Kh√¥ng c√≥"}</td>
                            </tr>
                            `;
                          }
                        });

                        // Tr·∫°ng th√°i x√°c minh n·∫øu c√≥
                        if (feature.properties.detection_status) {
                          popupContent += `
                          <tr>
                            <th>Tr·∫°ng th√°i</th>
                            <td>${feature.properties.detection_status}</td>
                          </tr>
                          `;
                        }

                        // Th√™m c√°c thu·ªôc t√≠nh c√≤n l·∫°i (b·ªè qua c√°c thu·ªôc t√≠nh k·ªπ thu·∫≠t)
                        Object.entries(feature.properties).forEach(([key, value]) => {
                          // B·ªè qua c√°c tr∆∞·ªùng ƒë√£ x·ª≠ l√Ω v√† tr∆∞·ªùng k·ªπ thu·∫≠t
                          if (
                            !priorityFields.includes(key) &&
                            key !== "detection_status" &&
                            !key.includes("geom") &&
                            !key.startsWith("_") &&
                            !["x", "y", "x_vn2000", "y_vn2000"].includes(key)
                          ) {
                            popupContent += `
                            <tr>
                              <th>${key}</th>
                              <td>${value !== null ? value : "Kh√¥ng c√≥"}</td>
                            </tr>
                            `;
                          }
                        });

                        popupContent += `
                          </table>
                        </div>
                        `;

                        layer.bindPopup(popupContent, { maxWidth: 300, className: "custom-popup-container" });
                      }

                      // S·ª± ki·ªán mouseover/mouseout ƒë·ªÉ highlight ƒë·ªëi t∆∞·ª£ng
                      layer.on("mouseover", function () {
                        this.setStyle({
                          weight: 3,
                          color: "#ff7800",
                          dashArray: "",
                          fillOpacity: 0.7,
                        });
                        this.bringToFront();
                      });

                      layer.on("mouseout", function () {
                        // Ch·ªâ reset style n·∫øu kh√¥ng ph·∫£i ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ch·ªçn
                        if (!selectedFeature || this.feature !== selectedFeature) {
                          geoJsonLayerRef.current.resetStyle(this);
                        }
                      });

                      // S·ª± ki·ªán click cho layer
                      layer.on("click", () => {
                        // ƒê·∫∑t style cho t·∫•t c·∫£ c√°c layer
                        if (geoJsonLayerRef.current) {
                          geoJsonLayerRef.current.eachLayer((l) => {
                            l.setStyle({
                              weight: l === layer ? 3 : 1,
                              color: l === layer ? "#ff7800" : "#3388ff",
                              fillOpacity: l === layer ? 0.7 : 0.2,
                            });

                            if (l === layer) {
                              l.bringToFront();
                            }
                          });
                        }

                        setSelectedFeature(feature);
                        setHighlightedLayerRef(layer);
                      });
                    }}
                    style={(feature) => ({
                      fillColor: getColorByStatus(feature.properties),
                      weight: selectedFeature && feature === selectedFeature ? 3 : 1,
                      opacity: 1,
                      color: selectedFeature && feature === selectedFeature ? "#ff7800" : "#ffffff",
                      fillOpacity: 0.7,
                    })}
                    ref={(layerRef) => {
                      if (layerRef) {
                        geoJsonLayerRef.current = layerRef;

                        if (mapReady) {
                          const bounds = layerRef.getBounds();
                          if (bounds.isValid()) {
                            window._leaflet_map.fitBounds(bounds, {
                              padding: [20, 20],
                            });
                            console.log("‚úÖ ƒê√£ zoom ƒë·∫øn d·ªØ li·ªáu GeoJSON");
                          }
                        }
                      }
                    }}
                  />
                )}

              {/* Layer ranh gi·ªõi h√†nh ch√≠nh (TR√äN C√ôNG ƒë·ªÉ hi·ªÉn th·ªã r√µ nh·∫•t) */}
              {mapLayers.administrative?.data &&
                mapLayers.administrative.visible &&
                (() => {
                  console.log(`üó∫Ô∏è Rendering administrative layer:`, {
                    featureCount:
                      mapLayers.administrative.data.features?.length,
                    visible: mapLayers.administrative.visible,
                    sample: mapLayers.administrative.data.features?.[0],
                  });

                  return (
                    <GeoJSON
                      key={`administrative-${Date.now()}`}
                      data={{
                        type: "FeatureCollection",
                        features: mapLayers.administrative.data.features || [],
                      }}
                      onEachFeature={(feature, layer) => {
                        console.log(
                          `üîó Adding feature to map:`,
                          feature.properties
                        );
                        onEachFeature(feature, layer, "administrative");
                      }}
                      style={(feature) => {
                        const style = getLayerStyle(
                          feature,
                          "administrative",
                          selectedFeature === feature
                        );
                        console.log(`üé® Feature style:`, style);
                        return style;
                      }}
                    />
                  );
                })()}
            </>
          )}

          <CustomMapControl 
            setMapType={setMapType}
            mapLayers={mapLayers}
            toggleLayerVisibility={toggleLayerVisibility}
          />
        </MapContainer>
      </div>

      {!layerName &&
        isDataPage &&
        (loading ? (
          <div className="text-center text-green-700 font-semibold p-3 bg-white rounded-md shadow">
            <div className="animate-spin inline-block w-6 h-6 border-4 border-green-500 border-t-transparent rounded-full mr-2"></div>
            ƒêang t·∫£i d·ªØ li·ªáu... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t
          </div>
        ) : (
          geoData?.features?.length > 0 && (
            <div className="relative">
              {/* Loading overlay cho b·∫£ng d·ªØ li·ªáu */}
              {loadingDetails && <LoadingOverlay message={loadingMessage} />}

              <Table
                data={geoData.features.map((f) => f.properties)}
                onRowClick={handleRowClick}
              />
            </div>
          )
        ))}

      {/* Debugging display */}
      {!loading &&
        (!geoData || !geoData.features || geoData.features.length === 0) &&
        Object.values(mapLayers).every((layer) => !layer.data) && (
          <div className="text-center text-amber-700 font-semibold p-3 bg-amber-50 rounded-md mt-2">
            ‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu hi·ªÉn th·ªã. H√£y s·ª≠ d·ª•ng ch·ª©c nƒÉng "C·∫≠p nh·∫≠t d·ªØ
            li·ªáu" ƒë·ªÉ t·∫£i c√°c l·ªõp b·∫£n ƒë·ªì.
          </div>
        )}
    </div>
  );
};

export default Map;