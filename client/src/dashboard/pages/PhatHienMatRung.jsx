// client/src/dashboard/pages/PhatHienMatRung.jsx - FIXED VERSION
import React, { useState, useEffect, useRef } from "react";
import { useLocation } from "react-router-dom";
import { ClipLoader } from 'react-spinners';
import { FaCloudSun, FaImage, FaListAlt, FaExclamationTriangle, FaRedo, FaExternalLinkAlt, FaExpand } from "react-icons/fa";
import { toast } from "react-toastify";

export default function PhatHienMatRung() {
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("phantich");
  const [error, setError] = useState(null);
  const [retryCount, setRetryCount] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const iframeRef = useRef(null);
  const containerRef = useRef(null);
  const location = useLocation();
  
  // ‚úÖ B·ªé TIMEOUT - ƒê·ªÉ iframe t·ª± load
  const [loadTimeout, setLoadTimeout] = useState(null);
  
  useEffect(() => {
    // Ki·ªÉm tra tab t·ª´ URL
    const searchParams = new URLSearchParams(location.search);
    const tab = searchParams.get("tab");
    if (tab && ["phantich", "locmay", "xulyanh"].includes(tab)) {
      setActiveTab(tab);
    }
    
    // Reset states when component mounts
    setError(null);
    setRetryCount(0);
    loadIframe();
  }, [location]);

  useEffect(() => {
    loadIframe();
  }, [activeTab]);
  
  const loadIframe = () => {
    setLoading(true);
    setError(null);
    
    // Clear previous timeout
    if (loadTimeout) {
      clearTimeout(loadTimeout);
    }
    
    // ‚úÖ TƒÇNG TIMEOUT L√äN 60 GI√ÇY thay v√¨ b·ªè ho√†n to√†n
    const timeout = setTimeout(() => {
      if (loading) {
        console.warn(`‚ö†Ô∏è Iframe loading timeout for ${activeTab} after 60 seconds`);
        // ‚úÖ KH√îNG SET ERROR - ch·ªâ log warning
        console.log("üí° Continuing to wait for iframe to load...");
      }
    }, 60000); // 60 seconds timeout
    
    setLoadTimeout(timeout);
  };
  
  // URLs cho c√°c tab
  const getTabConfig = () => {
    const configs = {
      phantich: {
        title: "Ph√¢n t√≠ch m·∫•t r·ª´ng",
        url: "https://ee-phathiensommatrung.projects.earthengine.app/view/phantichmatrung",
        icon: <FaListAlt />,
        description: "Ph√¢n t√≠ch v√† ph√°t hi·ªán m·∫•t r·ª´ng s·ª≠ d·ª•ng AI"
      },
      locmay: {
        title: "C√¥ng c·ª• l·ªçc m√¢y",
        url: "https://ee-phathiensommatrung.projects.earthengine.app/view/locmay",
        icon: <FaCloudSun />,
        description: "L·ªçc v√† x·ª≠ l√Ω m√¢y trong ·∫£nh v·ªá tinh"
      },
      xulyanh: {
        title: "X·ª≠ l√Ω ·∫£nh v·ªá tinh",
        url: "https://ee-phathiensommatrung.projects.earthengine.app/view/xulyanh",
        icon: <FaImage />,
        description: "C√¥ng c·ª• x·ª≠ l√Ω v√† ph√¢n t√≠ch ·∫£nh v·ªá tinh"
      }
    };
    
    return configs[activeTab] || configs.phantich;
  };
  
  // X·ª≠ l√Ω khi iframe load th√†nh c√¥ng
  const handleIframeLoad = () => {
    console.log(`‚úÖ Iframe loaded successfully for ${activeTab}`);
    setLoading(false);
    setError(null);
    
    if (loadTimeout) {
      clearTimeout(loadTimeout);
    }
    
    // Toast success message
    toast.success(`üéâ ƒê√£ t·∫£i th√†nh c√¥ng ${getTabConfig().title}`, {
      autoClose: 2000
    });
  };
  
  // X·ª≠ l√Ω khi iframe load error
  const handleIframeError = () => {
    console.error(`‚ùå Iframe failed to load for ${activeTab}`);
    setLoading(false);
    setError("LOAD_ERROR");
    
    if (loadTimeout) {
      clearTimeout(loadTimeout);
    }
    
    // Toast error message
    toast.error(`‚ùå Kh√¥ng th·ªÉ t·∫£i ${getTabConfig().title}. Vui l√≤ng th·ª≠ l·∫°i.`, {
      autoClose: 5000
    });
  };
  
  // X·ª≠ l√Ω chuy·ªÉn tab
  const handleChangeTab = (tab) => {
    if (tab === activeTab) return;
    
    console.log(`üîÑ Switching to tab: ${tab}`);
    setActiveTab(tab);
  };
  
  // Retry loading
  const handleRetry = () => {
    const newRetryCount = retryCount + 1;
    setRetryCount(newRetryCount);
    
    console.log(`üîÑ Retry attempt ${newRetryCount} for ${activeTab}`);
    
    if (newRetryCount <= 5) { // TƒÉng s·ªë l·∫ßn retry
      loadIframe();
      toast.info(`üîÑ ƒêang th·ª≠ l·∫°i... (${newRetryCount}/5)`, {
        autoClose: 2000
      });
    } else {
      toast.error("‚ùå ƒê√£ th·ª≠ l·∫°i nhi·ªÅu l·∫ßn. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.", {
        autoClose: 5000
      });
    }
  };
  
  // M·ªü trong tab m·ªõi
  const handleOpenInNewTab = () => {
    const config = getTabConfig();
    window.open(config.url, '_blank', 'noopener,noreferrer');
    toast.info(`üåê ƒê√£ m·ªü ${config.title} trong tab m·ªõi`, {
      autoClose: 3000
    });
  };

  // ‚úÖ TH√äM FULLSCREEN SUPPORT
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen().then(() => {
        setIsFullscreen(true);
        toast.info("üì∫ ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô to√†n m√†n h√¨nh");
      }).catch(err => {
        console.error("Error entering fullscreen:", err);
        toast.error("Kh√¥ng th·ªÉ chuy·ªÉn sang ch·∫ø ƒë·ªô to√†n m√†n h√¨nh");
      });
    } else {
      document.exitFullscreen().then(() => {
        setIsFullscreen(false);
        toast.info("ü™ü ƒê√£ tho√°t ch·∫ø ƒë·ªô to√†n m√†n h√¨nh");
      });
    }
  };

  // Listen for fullscreen changes
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);
  
  const currentConfig = getTabConfig();

  return (
    <div 
      ref={containerRef}
      className={`w-full h-screen flex flex-col bg-gray-50 ${isFullscreen ? 'fullscreen-container' : ''}`}
    >
      
      {/* Header v·ªõi tab navigation */}
      <div className="bg-white shadow-sm border-b border-gray-200 px-4 py-3 flex-shrink-0">
        {/* Tab buttons */}
        <div className="flex gap-2 mb-2">
          <button
            onClick={() => handleChangeTab("phantich")}
            className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === "phantich"
                ? "bg-green-600 text-white shadow-md"
                : "bg-gray-100 hover:bg-gray-200 text-gray-700"
            }`}
          >
            <FaListAlt className="mr-2" />
            Ph√¢n t√≠ch m·∫•t r·ª´ng
          </button>
          
          <button
            onClick={() => handleChangeTab("locmay")}
            className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === "locmay"
                ? "bg-blue-600 text-white shadow-md"
                : "bg-gray-100 hover:bg-gray-200 text-gray-700"
            }`}
          >
            <FaCloudSun className="mr-2" />
            L·ªçc m√¢y
          </button>
          
          <button
            onClick={() => handleChangeTab("xulyanh")}
            className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all ${
              activeTab === "xulyanh"
                ? "bg-purple-600 text-white shadow-md"
                : "bg-gray-100 hover:bg-gray-200 text-gray-700"
            }`}
          >
            <FaImage className="mr-2" />
            X·ª≠ l√Ω ·∫£nh
          </button>

          {/* ‚úÖ TH√äM N√öT FULLSCREEN */}
          <button
            onClick={toggleFullscreen}
            className="flex items-center px-4 py-2 rounded-lg font-medium bg-gray-100 hover:bg-gray-200 text-gray-700 transition-all ml-auto"
            title={isFullscreen ? "Tho√°t to√†n m√†n h√¨nh" : "To√†n m√†n h√¨nh"}
          >
            <FaExpand className="mr-2" />
            {isFullscreen ? "Tho√°t to√†n m√†n h√¨nh" : "To√†n m√†n h√¨nh"}
          </button>
        </div>
        
        {/* Current tab info */}
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <span className="mr-2">{currentConfig.icon}</span>
            <h1 className="text-lg font-semibold text-gray-800">{currentConfig.title}</h1>
            <span className="ml-2 text-sm text-gray-500">‚Ä¢ {currentConfig.description}</span>
          </div>

          {/* Action buttons */}
          <div className="flex gap-2">
            <button
              onClick={handleRetry}
              disabled={retryCount > 5}
              className="flex items-center px-3 py-1 text-sm bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50 transition-colors"
            >
              <FaRedo className="mr-1" />
              T·∫£i l·∫°i
            </button>
            
            <button
              onClick={handleOpenInNewTab}
              className="flex items-center px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
            >
              <FaExternalLinkAlt className="mr-1" />
              Tab m·ªõi
            </button>
          </div>
        </div>
      </div>

      {/* Main content area */}
      <div className="relative flex-1 overflow-hidden">
        
        {/* Loading overlay - CH·ªà HI·ªÇN TH·ªä TRONG 10 GI√ÇY ƒê·∫¶U */}
        {loading && !error && (
          <div className="absolute inset-0 flex items-center justify-center bg-white z-10">
            <div className="flex flex-col items-center max-w-md mx-4 text-center">
              <ClipLoader color="#027e02" size={50} />
              <p className="mt-4 text-lg text-forest-green-primary font-medium">
                ƒêang t·∫£i {currentConfig.title}...
              </p>
              <p className="mt-2 text-sm text-gray-600">
                {currentConfig.description}
              </p>
              <p className="mt-2 text-xs text-gray-500">
                üí° C√≥ th·ªÉ m·∫•t 1-2 ph√∫t ƒë·ªÉ t·∫£i ho√†n to√†n
              </p>
              {retryCount > 0 && (
                <p className="mt-2 text-xs text-orange-600">
                  L·∫ßn th·ª≠: {retryCount}/5
                </p>
              )}
            </div>
          </div>
        )}
        
        {/* Error overlay */}
        {error && (
          <div className="absolute inset-0 flex items-center justify-center bg-white z-10">
            <div className="flex flex-col items-center max-w-md mx-4 text-center p-6">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                <FaExclamationTriangle className="text-2xl text-red-500" />
              </div>
              
              <h3 className="text-xl font-semibold text-gray-800 mb-2">
                Kh√¥ng th·ªÉ t·∫£i {currentConfig.title}
              </h3>
              
              <div className="text-sm text-gray-600 mb-4">
                {error === "TIMEOUT" && (
                  <div>
                    <p className="mb-2">‚è±Ô∏è Th·ªùi gian t·∫£i qu√° l√¢u</p>
                    <p>C√≥ th·ªÉ do k·∫øt n·ªëi m·∫°ng ch·∫≠m ho·∫∑c server Google Earth Engine ƒëang b·∫≠n.</p>
                  </div>
                )}
                
                {error === "LOAD_ERROR" && (
                  <div>
                    <p className="mb-2">üîó L·ªói k·∫øt n·ªëi</p>
                    <p>Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Earth Engine. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.</p>
                  </div>
                )}
              </div>
              
              <div className="flex flex-col sm:flex-row gap-2 w-full">
                <button
                  onClick={handleRetry}
                  disabled={retryCount > 5}
                  className="flex-1 flex items-center justify-center px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <FaRedo className="mr-2" />
                  {retryCount > 5 ? "ƒê√£ h·∫øt l∆∞·ª£t th·ª≠" : `Th·ª≠ l·∫°i (${retryCount}/5)`}
                </button>
                
                <button
                  onClick={handleOpenInNewTab}
                  className="flex-1 flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                >
                  <FaExternalLinkAlt className="mr-2" />
                  M·ªü tab m·ªõi
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* ‚úÖ MAIN IFRAME v·ªõi CSS t·ªëi ∆∞u cho scroll */}
        {!error && (
          <iframe
            ref={iframeRef}
            src={currentConfig.url}
            title={currentConfig.title}
            className="w-full h-full border-0"
            onLoad={handleIframeLoad}
            onError={handleIframeError}
            // ‚úÖ B·ªé SANDBOX ho·∫∑c c·∫•u h√¨nh nh·∫π h∆°n ƒë·ªÉ cho ph√©p scroll
            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"
            style={{ 
              border: "none",
              display: "block", // Lu√¥n hi·ªÉn th·ªã, kh√¥ng ·∫©n khi loading
              opacity: loading ? 0.3 : 1, // L√†m m·ªù khi loading thay v√¨ ·∫©n
              transition: "opacity 0.3s ease",
              // ‚úÖ CSS ƒë·ªÉ iframe c√≥ th·ªÉ scroll trong m·ªçi tr∆∞·ªùng h·ª£p
              overflow: "auto",
              WebkitOverflowScrolling: "touch", // iOS smooth scrolling
              scrollBehavior: "smooth"
            }}
            // ‚úÖ Th√™m c√°c attributes ƒë·ªÉ t·ªëi ∆∞u scrolling
            allow="geolocation; camera; microphone; encrypted-media; fullscreen; autoplay"
            referrerPolicy="strict-origin-when-cross-origin"
            loading="eager"
          />
        )}
      </div>
      
      {/* Footer info */}
      <div className="bg-gray-800 text-white px-4 py-2 text-xs flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <span className="mr-2">üåç</span>
            <span>Google Earth Engine Application</span>
            {loading && <span className="ml-2 text-yellow-300">‚Ä¢ ƒêang t·∫£i...</span>}
          </div>
          <div className="flex items-center space-x-4">
            <span>Powered by Google Earth Engine</span>
            <span>‚Ä¢</span>
            <span>L√†o Cai Forest Monitoring</span>
          </div>
        </div>
      </div>

      {/* ‚úÖ CSS STYLES CHO FULLSCREEN */}
      <style jsx>{`
        .fullscreen-container {
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          width: 100vw !important;
          height: 100vh !important;
          z-index: 999999 !important;
          background: white;
        }

        .fullscreen-container iframe {
          width: 100% !important;
          height: calc(100vh - 120px) !important; /* Tr·ª´ header v√† footer */
        }

        /* ‚úÖ T·ªëi ∆∞u scroll cho iframe */
        iframe {
          -webkit-overflow-scrolling: touch;
          overflow: auto !important;
        }

        /* ‚úÖ ƒê·∫£m b·∫£o iframe c√≥ th·ªÉ scroll khi zoom */
        @media screen and (min-resolution: 150dpi) {
          iframe {
            transform-origin: 0 0;
            zoom: 1;
          }
        }
      `}</style>
    </div>
  );
}