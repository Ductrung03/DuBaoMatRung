import React, { createContext, useContext, useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import config from "../../config";

// T·∫°o context
const AuthContext = createContext();

// Hook t√πy ch·ªânh ƒë·ªÉ s·ª≠ d·ª•ng context
export const useAuth = () => useContext(AuthContext);

// Provider ƒë·ªÉ b·ªçc quanh app
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(sessionStorage.getItem("token"));
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  // Log API URL for debugging
  console.log("üîç API URL t·ª´ config:", config.API_URL);

  // Thi·∫øt l·∫≠p axios defaults khi token thay ƒë·ªïi
  useEffect(() => {
    if (token) {
      axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
      sessionStorage.setItem("token", token);
    } else {
      delete axios.defaults.headers.common["Authorization"];
      sessionStorage.removeItem("token");
    }
  }, [token]);

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a khi component mount
  useEffect(() => {
    const checkLoggedIn = async () => {
      if (token) {
        try {
          const res = await axios.get(`${config.API_URL}/api/auth/me`);
          // Log th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
          console.log("User data from /api/auth/me:", res.data.user);
          
          // L∆∞u d·ªØ li·ªáu user, bao g·ªìm district_id ·ªü d·∫°ng TCVN3
          setUser(res.data.user);
        } catch (err) {
          console.error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n:", err);
          setToken(null);
          setUser(null);
        }
      }
      setLoading(false);
    };

    checkLoggedIn();
  }, [token]);

  // ƒêƒÉng nh·∫≠p
  const login = async (username, password) => {
    try {
      setLoading(true);
      
      // Log th√¥ng tin request ƒë·ªÉ debug
      console.log(`üîÑ ƒêang g·ª≠i request ƒë·∫øn: ${config.API_URL}/api/auth/login`);
      console.log("üì¶ D·ªØ li·ªáu g·ª≠i ƒëi:", { username, password: "***" });
      
      const res = await axios.post(`${config.API_URL}/api/auth/login`, {
        username,
        password,
      });

      console.log("‚úÖ K·∫øt qu·∫£ ƒëƒÉng nh·∫≠p:", res.data);
      
      // L∆∞u token v√† th√¥ng tin user (bao g·ªìm district_id d·∫°ng TCVN3)
      console.log("‚úÖ Th√¥ng tin user t·ª´ API:", res.data.user);
      console.log("‚úÖ district_id t·ª´ API (TCVN3):", res.data.user.district_id);
      
      setToken(res.data.token);
      setUser(res.data.user);
      toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
      navigate("/dashboard");
      return true;
    } catch (err) {
      console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
      
      // Log chi ti·∫øt h∆°n v·ªÅ l·ªói
      if (err.response) {
        console.log("üì° Ph·∫£n h·ªìi t·ª´ server:", {
          status: err.response.status,
          data: err.response.data
        });
      }
      
      const errorMessage = err.response?.data?.message || "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng";
      toast.error(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // ƒêƒÉng xu·∫•t
  const logout = async () => {
    try {
      await axios.post(`${config.API_URL}/api/auth/logout`);
    } catch (err) {
      console.error("L·ªói ƒëƒÉng xu·∫•t:", err);
    } finally {
      setToken(null);
      setUser(null);
      navigate("/login");
      toast.info("ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng");
    }
  };

  // Ki·ªÉm tra vai tr√≤
  const isAdmin = () => user && user.role === "admin";
  
  // L·∫•y m√£ huy·ªán c·ªßa ng∆∞·ªùi d√πng (TCVN3)
  const getUserDistrictId = () => user?.district_id || null;
  
  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu c·ªßa huy·ªán c·ª• th·ªÉ kh√¥ng
  // L∆∞u √Ω: C·∫£ districtId v√† user.district_id ƒë·ªÅu ph·∫£i ·ªü c√πng ƒë·ªãnh d·∫°ng (TCVN3)
  const canAccessDistrict = (districtId) => {
    // Admin c√≥ th·ªÉ truy c·∫≠p t·∫•t c·∫£ c√°c huy·ªán
    if (isAdmin()) return true;
    
    // N·∫øu kh√¥ng cung c·∫•p districtId, cho ph√©p truy c·∫≠p (ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu chung)
    if (!districtId) return true;
    
    // N·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ district_id, kh√¥ng cho ph√©p truy c·∫≠p
    if (!user?.district_id) return false;
    
    // So s√°nh ch√≠nh x√°c v√¨ c·∫£ hai ƒë·ªÅu l√† TCVN3
    return user.district_id === districtId;
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        loading,
        login,
        logout,
        isAdmin,
        getUserDistrictId,
        canAccessDistrict
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};