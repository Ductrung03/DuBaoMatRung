const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
// B·ªè d√≤ng import open ·ªü ƒë√¢y
const pool = require("./db/index");
const cookieParser = require("cookie-parser");

const hanhchinhRoutes = require("./routes/hanhchinh.route");
const shapefileRoutes = require("./routes/shapefile.route");
const importGeeUrlRoutes = require("./routes/importGeeUrl.route");
const matRungRoutes = require("./routes/matrung.route");
const dataDropdownRoutes = require("./routes/dataDropdown.routes");
const quanlydulieu = require("./routes/quanLyDuLieu.routes");
const baocao = require("./routes/baocao.routes");
const authRoutes = require("./routes/auth.routes");
const userRoutes = require("./routes/user.routes");
const dataRoutes = require("./routes/data.routes");
const layerDataRoutes = require("./routes/layerData.routes");
require("dotenv").config();

// Log bi·∫øn m√¥i tr∆∞·ªùng khi kh·ªüi ƒë·ªông (ch·ªâ log d·∫°ng **, kh√¥ng log th√¥ng tin th·∫≠t)
console.log("üîÑ Th√¥ng tin m√¥i tr∆∞·ªùng:");
console.log(`- PGHOST: ${process.env.PGHOST ? "***" : "kh√¥ng c√≥"}`);
console.log(`- PGPORT: ${process.env.PGPORT ? "***" : "kh√¥ng c√≥"}`);
console.log(`- PGUSER: ${process.env.PGUSER ? "***" : "kh√¥ng c√≥"}`);
console.log(`- PGPASSWORD: ${process.env.PGPASSWORD ? "***" : "kh√¥ng c√≥"}`);
console.log(`- PGDATABASE: ${process.env.PGDATABASE ? "***" : "kh√¥ng c√≥"}`);
console.log(
  `- GEOSERVER_USER: ${process.env.GEOSERVER_USER ? "***" : "kh√¥ng c√≥"}`
);
console.log(
  `- GEOSERVER_PASS: ${process.env.GEOSERVER_PASS ? "***" : "kh√¥ng c√≥"}`
);
console.log(
  `- JWT_SECRET: ${process.env.JWT_SECRET ? "***" : "s·ª≠ d·ª•ng secret m·∫∑c ƒë·ªãnh"}`
);

// Ki·ªÉm tra k·∫øt n·ªëi database ngay khi kh·ªüi ƒë·ªông
pool
  .query("SELECT NOW()")
  .then((result) => {
    console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng:", result.rows[0].now);
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi database:", err.message);
    console.error("Chi ti·∫øt l·ªói:", err);
  });

const app = express();

// Swagger
const swaggerUi = require("swagger-ui-express");
const swaggerJsdoc = require("swagger-jsdoc");
const swaggerOptions = require("./swaggerOptions");
const swaggerSpec = swaggerJsdoc(swaggerOptions);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Middleware
app.use(cors());
app.use(express.json());
app.use(cookieParser());
app.use((req, res, next) => {
  console.log(`üìù ${req.method} ${req.url}`);
  next();
});

// Middleware for debugging routes
app.use((req, res, next) => {
  console.log(`üìù ${req.method} ${req.url}`);
  next();
});

// Routes
app.use("/api/auth", authRoutes);
app.use("/api/users", userRoutes);
app.use("/api/data", dataRoutes);
app.use("/api/import-shapefile", shapefileRoutes);
app.use("/api/import-gee-url", importGeeUrlRoutes);
app.use("/api/hanhchinh", hanhchinhRoutes);
app.use("/api/mat-rung", matRungRoutes);
app.use("/api/dropdown", dataDropdownRoutes);
app.use("/api/quan-ly-du-lieu", quanlydulieu);
app.use("/api/bao-cao", baocao);
app.use("/api/layer-data", layerDataRoutes);

// Test route
app.get("/api/test", (req, res) => {
  res.json({ message: "API ƒëang ho·∫°t ƒë·ªông!" });
});

app.get("/api/test-db", async (req, res) => {
  try {
    console.log("üëâ ƒêang th·ª±c hi·ªán test k·∫øt n·ªëi database...");
    const result = await pool.query("SELECT NOW()");
    console.log("‚úÖ Test k·∫øt n·ªëi th√†nh c√¥ng:", result.rows[0].now);
    res.json({
      success: true,
      message: "K·∫øt n·ªëi database th√†nh c√¥ng",
      timestamp: result.rows[0].now,
    });
  } catch (error) {
    console.error("‚ùå Test k·∫øt n·ªëi th·∫•t b·∫°i:", error.message);
    console.error("Chi ti·∫øt l·ªói:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói k·∫øt n·ªëi database",
      error: error.message,
    });
  }
});

app.get("/", (req, res) => {
  res.send("‚úÖ Backend Geo API ƒëang ho·∫°t ƒë·ªông");
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error("üî¥ L·ªói server:", err);
  res.status(500).json({
    success: false,
    message: "L·ªói server",
    error: err.message,
  });
});

// 404 middleware
app.use((req, res) => {
  console.log(`‚ùå 404 Not Found: ${req.method} ${req.url}`);
  res.status(404).json({
    success: false,
    message: "API endpoint kh√¥ng t·ªìn t·∫°i",
  });
});

const port = process.env.PORT || 3000;

// H√†m async ƒë·ªÉ x·ª≠ l√Ω dynamic import
const startServer = async () => {
  app.listen(port, async () => {
    console.log(`üöÄ Backend ch·∫°y t·∫°i http://localhost:${port}`);
    console.log(`üìö API Docs t·∫°i http://localhost:${port}/api-docs`);
    
    // Kh√¥ng ch·∫°y open() tr√™n m√¥i tr∆∞·ªùng production
    if (process.env.NODE_ENV !== 'production') {
      try {
        // S·ª≠ d·ª•ng dynamic import thay v√¨ require
        const { default: open } = await import('open');
        await open(`http://localhost:${port}/api-docs`);
      } catch (err) {
        console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü tr√¨nh duy·ªát t·ª± ƒë·ªông:", err.message);
      }
    }
  });
};

// Kh·ªüi ch·∫°y server
startServer();