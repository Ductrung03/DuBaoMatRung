// server/controllers/verification.controller.js
const pool = require("../db");

// ‚úÖ X√°c minh l√¥ CB v·ªõi logic m·ªõi
exports.verifyMatRung = async (req, res) => {
  const { gid } = req.params;
  const { 
    verification_reason,
    verified_area, // C√≥ th·ªÉ null/undefined
    verification_notes,
    detection_date // C√≥ th·ªÉ null/undefined
  } = req.body;

  // L·∫•y ID user t·ª´ token (ƒë√£ ƒë∆∞·ª£c set b·ªüi auth middleware)
  const verifiedBy = req.user.id;
  const verifiedByName = req.user.full_name;

  if (!gid) {
    return res.status(400).json({
      success: false,
      message: "Vui l√≤ng cung c·∫•p m√£ l√¥ CB (gid)"
    });
  }

  if (!verification_reason) {
    return res.status(400).json({
      success: false,
      message: "Vui l√≤ng ch·ªçn nguy√™n nh√¢n x√°c minh"
    });
  }

  try {
    console.log(`üîç B·∫Øt ƒë·∫ßu x√°c minh l√¥ CB-${gid} b·ªüi user ${verifiedByName} (ID: ${verifiedBy})`);

    // B∆∞·ªõc 1: Ki·ªÉm tra l√¥ CB c√≥ t·ªìn t·∫°i kh√¥ng
    const checkQuery = `
      SELECT gid, area, detection_status, verified_area 
      FROM mat_rung 
      WHERE gid = $1
    `;
    
    const checkResult = await pool.query(checkQuery, [gid]);
    
    if (checkResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: `Kh√¥ng t√¨m th·∫•y l√¥ CB-${gid} trong c∆° s·ªü d·ªØ li·ªáu`
      });
    }

    const currentRecord = checkResult.rows[0];
    console.log(`üìã L√¥ CB-${gid} hi·ªán t·∫°i:`, {
      area: currentRecord.area,
      status: currentRecord.detection_status,
      verified_area: currentRecord.verified_area
    });

    // B∆∞·ªõc 2: X√°c ƒë·ªãnh gi√° tr·ªã c·∫≠p nh·∫≠t theo logic m·ªõi
    
    // üîß Logic di·ªán t√≠ch th·ª±c t·∫ø:
    // - N·∫øu kh√¥ng nh·∫≠p (null/undefined/empty) ‚Üí gi·ªØ nguy√™n gi√° tr·ªã hi·ªán t·∫°i
    // - N·∫øu c√≥ nh·∫≠p ‚Üí c·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi
    let finalVerifiedArea;
    if (verified_area === null || verified_area === undefined || verified_area === '') {
      finalVerifiedArea = currentRecord.verified_area || currentRecord.area; // Gi·ªØ nguy√™n ho·∫∑c d√πng area g·ªëc
      console.log(`üìè Di·ªán t√≠ch: Gi·ªØ nguy√™n = ${finalVerifiedArea}`);
    } else {
      finalVerifiedArea = parseFloat(verified_area);
      if (isNaN(finalVerifiedArea) || finalVerifiedArea < 0) {
        return res.status(400).json({
          success: false,
          message: "Di·ªán t√≠ch th·ª±c t·∫ø ph·∫£i l√† s·ªë h·ª£p l·ªá v√† l·ªõn h∆°n 0"
        });
      }
      console.log(`üìè Di·ªán t√≠ch: C·∫≠p nh·∫≠t m·ªõi = ${finalVerifiedArea}`);
    }

    // üîß Logic ng√†y x√°c minh:
    // - N·∫øu kh√¥ng nh·∫≠p ‚Üí l·∫•y ng√†y hi·ªán t·∫°i
    // - N·∫øu c√≥ nh·∫≠p ‚Üí d√πng ng√†y ƒë√≥
    let finalDetectionDate;
    if (!detection_date) {
      finalDetectionDate = new Date().toISOString().split('T')[0]; // Ng√†y hi·ªán t·∫°i YYYY-MM-DD
      console.log(`üìÖ Ng√†y x√°c minh: D√πng ng√†y hi·ªán t·∫°i = ${finalDetectionDate}`);
    } else {
      finalDetectionDate = detection_date;
      console.log(`üìÖ Ng√†y x√°c minh: D√πng ng√†y nh·∫≠p = ${finalDetectionDate}`);
    }

    // B∆∞·ªõc 3: Th·ª±c hi·ªán c·∫≠p nh·∫≠t v·ªõi transaction
    await pool.query('BEGIN');

    try {
      const updateQuery = `
        UPDATE mat_rung 
        SET 
          detection_status = 'ƒê√£ x√°c minh',
          verification_reason = $1,
          verified_area = $2,
          verification_notes = $3,
          detection_date = $4,
          verified_by = $5
        WHERE gid = $6
        RETURNING *
      `;

      const updateParams = [
        verification_reason,
        finalVerifiedArea,
        verification_notes || null,
        finalDetectionDate,
        verifiedBy,
        gid
      ];

      console.log(`üíæ Executing update v·ªõi params:`, updateParams);

      const updateResult = await pool.query(updateQuery, updateParams);

      if (updateResult.rows.length === 0) {
        throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l√¥ CB');
      }

      await pool.query('COMMIT');

      const updatedRecord = updateResult.rows[0];
      console.log(`‚úÖ X√°c minh th√†nh c√¥ng l√¥ CB-${gid}`);

      // B∆∞·ªõc 4: L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß ƒë·ªÉ tr·∫£ v·ªÅ (bao g·ªìm t√™n ng∆∞·ªùi x√°c minh)
      const detailQuery = `
        SELECT 
          m.*,
          u.full_name as verified_by_name,
          r.huyen,
          r.xa,
          r.tieukhu as tk,
          r.khoanh
        FROM mat_rung m
        LEFT JOIN users u ON m.verified_by = u.id  
        LEFT JOIN laocai_ranhgioihc r ON ST_Intersects(
          ST_Transform(m.geom, 4326), 
          ST_Transform(r.geom, 4326)
        )
        WHERE m.gid = $1
      `;

      const detailResult = await pool.query(detailQuery, [gid]);
      const finalRecord = detailResult.rows[0];

      res.json({
        success: true,
        message: `‚úÖ ƒê√£ x√°c minh th√†nh c√¥ng l√¥ CB-${gid}`,
        data: {
          gid: finalRecord.gid,
          detection_status: finalRecord.detection_status,
          verification_reason: finalRecord.verification_reason,
          verified_area: finalRecord.verified_area,
          original_area: finalRecord.area,
          verification_notes: finalRecord.verification_notes,
          detection_date: finalRecord.detection_date,
          verified_by: finalRecord.verified_by,
          verified_by_name: finalRecord.verified_by_name,
          updated_at: new Date().toISOString()
        },
        changes: {
          area_changed: finalVerifiedArea !== currentRecord.area,
          original_area: currentRecord.area,
          new_verified_area: finalVerifiedArea,
          verification_date_used: finalDetectionDate,
          verified_by_user: verifiedByName
        }
      });

    } catch (updateError) {
      await pool.query('ROLLBACK');
      throw updateError;
    }

  } catch (err) {
    console.error("‚ùå L·ªói x√°c minh l√¥ CB:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi x√°c minh l√¥ CB",
      error: err.message
    });
  }
};

// ‚úÖ L·∫•y l·ªãch s·ª≠ x√°c minh c·ªßa m·ªôt l√¥ CB
exports.getVerificationHistory = async (req, res) => {
  const { gid } = req.params;

  try {
    const query = `
      SELECT 
        m.gid,
        m.detection_status,
        m.verification_reason,
        m.verified_area,
        m.area as original_area,
        m.verification_notes,
        m.detection_date,
        m.verified_by,
        u.full_name as verified_by_name,
        u.username as verified_by_username
      FROM mat_rung m
      LEFT JOIN users u ON m.verified_by = u.id
      WHERE m.gid = $1
    `;

    const result = await pool.query(query, [gid]);

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: `Kh√¥ng t√¨m th·∫•y l√¥ CB-${gid}`
      });
    }

    const record = result.rows[0];

    res.json({
      success: true,
      data: {
        gid: record.gid,
        status: record.detection_status || 'Ch∆∞a x√°c minh',
        has_verification: !!record.verification_reason,
        verification: record.verification_reason ? {
          reason: record.verification_reason,
          verified_area: record.verified_area,
          original_area: record.original_area,
          area_changed: record.verified_area !== record.original_area,
          notes: record.verification_notes,
          date: record.detection_date,
          verified_by: {
            id: record.verified_by,
            name: record.verified_by_name,
            username: record.verified_by_username
          }
        } : null
      }
    });

  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y l·ªãch s·ª≠ x√°c minh:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y l·ªãch s·ª≠ x√°c minh",
      error: err.message
    });
  }
};