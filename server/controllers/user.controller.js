const pool = require("../db");
const bcrypt = require("bcryptjs");
const convertTcvn3ToUnicode = require("../utils/convertTcvn3ToUnicode");

// H√†m bƒÉm m·∫≠t kh·∫©u
const hashPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  return bcrypt.hash(password, salt);
};

// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (kh√¥ng bao g·ªìm m·∫≠t kh·∫©u)
exports.getAllUsers = async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT id, username, full_name, role, district_id, is_active, created_at, last_login FROM users ORDER BY created_at DESC"
    );

    // Th√™m x·ª≠ l√Ω ƒë·ªÉ hi·ªÉn th·ªã t√™n huy·ªán Unicode n·∫øu c·∫ßn
    const usersWithDistrictName = result.rows.map(user => ({
      ...user,
      district_name: user.district_id ? convertTcvn3ToUnicode(user.district_id) : null
    }));

    res.json({
      success: true,
      data: usersWithDistrictName
    });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ 
      success: false, 
      message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" 
    });
  }
};

// T·∫°o ng∆∞·ªùi d√πng m·ªõi
// S·ª≠a h√†m createUser trong file server/controllers/user.controller.js

exports.createUser = async (req, res) => {
  const {
    username,
    password,
    full_name,
    role = "user",
    district_id = null,
  } = req.body;

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!username || !password || !full_name) {
    return res.status(400).json({
      success: false,
      message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ng∆∞·ªùi d√πng",
    });
  }

  // In ra th√¥ng tin debug
  console.log("üìã D·ªØ li·ªáu t·∫°o ng∆∞·ªùi d√πng:", {
    username,
    full_name,
    role,
    district_id: district_id || "null",
  });

  try {
    // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await pool.query(
      "SELECT * FROM users WHERE username = $1",
      [username]
    );

    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        success: false,
        message: "T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
      });
    }

    // BƒÉm m·∫≠t kh·∫©u
    const password_hash = await hashPassword(password);

    // Th√™m ng∆∞·ªùi d√πng v√†o database
    // S·ª≠ d·ª•ng c√∫ ph√°p SQL chu·∫©n h∆°n v·ªõi t√™n c·ªôt r√µ r√†ng
    const query = `
      INSERT INTO users (username, password_hash, full_name, role, district_id) 
      VALUES ($1, $2, $3, $4, $5) 
      RETURNING id, username, full_name, role, district_id, is_active, created_at
    `;

    console.log("üìã SQL Query:", query);
    console.log("üìã Parameters:", [
      username,
      "***",
      full_name,
      role,
      district_id,
    ]);

    const result = await pool.query(query, [
      username,
      password_hash,
      full_name,
      role,
      district_id,
    ]);

    console.log("‚úÖ K·∫øt qu·∫£ t·∫°o ng∆∞·ªùi d√πng:", result.rows[0]);

    res.status(201).json({
      success: true,
      message: "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: result.rows[0],
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o ng∆∞·ªùi d√πng:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi t·∫°o ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUser = async (req, res) => {
  const { id } = req.params;
  const { full_name, role, is_active, password, district_id } = req.body;

  try {
    // In ra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ debug
    console.log("üìã D·ªØ li·ªáu c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", {
      id,
      full_name,
      role,
      is_active,
      district_id,
      password: password ? "***" : undefined,
    });

    let query, params;

    if (password) {
      // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi, c·∫≠p nh·∫≠t c·∫£ m·∫≠t kh·∫©u
      const password_hash = await hashPassword(password);
      query = `
        UPDATE users 
        SET full_name = $1, role = $2, is_active = $3, password_hash = $4, district_id = $5
        WHERE id = $6 
        RETURNING id, username, full_name, role, district_id, is_active, created_at, last_login
      `;
      params = [full_name, role, is_active, password_hash, district_id, id];
    } else {
      // Kh√¥ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
      query = `
        UPDATE users 
        SET full_name = $1, role = $2, is_active = $3, district_id = $4
        WHERE id = $5 
        RETURNING id, username, full_name, role, district_id, is_active, created_at, last_login
      `;
      params = [full_name, role, is_active, district_id, id];
    }

    console.log("üìã Query c·∫≠p nh·∫≠t:", query);
    console.log("üìã Params:", params);

    const result = await pool.query(query, params);

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    console.log("‚úÖ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:", result.rows[0]);

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: result.rows[0],
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

// X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    // Kh√¥ng x√≥a ng∆∞·ªùi d√πng th·∫≠t s·ª±, ch·ªâ ƒë·∫∑t is_active = false
    const result = await pool.query(
      "UPDATE users SET is_active = FALSE WHERE id = $1 RETURNING id",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    res.json({
      success: true,
      message: "V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng",
    });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a ng∆∞·ªùi d√πng:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi x√≥a ng∆∞·ªùi d√πng",
    });
  }
};

// K√≠ch ho·∫°t l·∫°i ng∆∞·ªùi d√πng ƒë√£ b·ªã v√¥ hi·ªáu h√≥a
exports.activateUser = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await pool.query(
      "UPDATE users SET is_active = TRUE WHERE id = $1 RETURNING id",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    res.json({
      success: true,
      message: "K√≠ch ho·∫°t ng∆∞·ªùi d√πng th√†nh c√¥ng",
    });
  } catch (err) {
    console.error("‚ùå L·ªói k√≠ch ho·∫°t ng∆∞·ªùi d√πng:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi k√≠ch ho·∫°t ng∆∞·ªùi d√πng",
    });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u
exports.changePassword = async (req, res) => {
  const { id } = req.params;
  const { old_password, new_password } = req.body;

  if (!old_password || !new_password) {
    return res.status(400).json({
      success: false,
      message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u c≈© v√† m·ªõi",
    });
  }

  try {
    // Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
    const userResult = await pool.query("SELECT * FROM users WHERE id = $1", [
      id,
    ]);

    if (userResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    const user = userResult.rows[0];

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isPasswordValid = await bcrypt.compare(
      old_password,
      user.password_hash
    );
    if (!isPasswordValid) {
      return res.status(400).json({
        success: false,
        message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng",
      });
    }

    // BƒÉm m·∫≠t kh·∫©u m·ªõi
    const password_hash = await hashPassword(new_password);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    await pool.query("UPDATE users SET password_hash = $1 WHERE id = $2", [
      password_hash,
      id,
    ]);

    res.json({
      success: true,
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u",
    });
  }
};
