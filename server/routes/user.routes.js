const express = require("express");
const router = express.Router();
const userController = require("../controllers/user.controller");
const authMiddleware = require("../middleware/auth.middleware");

// Middleware ƒë·ªÉ b·∫Øt l·ªói async
const asyncHandler = fn => (req, res, next) =>
  Promise.resolve(fn(req, res, next)).catch(next);

// Log middleware ƒë·ªÉ debug
router.use((req, res, next) => {
  console.log(`üìù Users API: ${req.method} ${req.url}`);
  console.log(`üîë Authorization Header: ${req.headers.authorization ? 'C√≥' : 'Kh√¥ng c√≥'}`);
  next();
});

// T·∫•t c·∫£ c√°c route ƒë·ªÅu y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn admin
router.use(authMiddleware.authenticate, authMiddleware.isAdmin);

/**
 * @swagger
 * /users:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch ng∆∞·ªùi d√πng
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 */
router.get("/", asyncHandler(userController.getAllUsers));

/**
 * @swagger
 * /users:
 *   post:
 *     summary: T·∫°o ng∆∞·ªùi d√πng m·ªõi
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *               password:
 *                 type: string
 *               full_name:
 *                 type: string
 *               role:
 *                 type: string
 *     responses:
 *       201:
 *         description: T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng
 *       400:
 *         description: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 */
router.post("/", asyncHandler(userController.createUser));

/**
 * @swagger
 * /users/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               full_name:
 *                 type: string
 *               role:
 *                 type: string
 *               is_active:
 *                 type: boolean
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.put("/:id", asyncHandler(userController.updateUser));

/**
 * @swagger
 * /users/{id}:
 *   delete:
 *     summary: V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: V√¥ hi·ªáu h√≥a th√†nh c√¥ng
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.delete("/:id", asyncHandler(userController.deleteUser));

/**
 * @swagger
 * /users/{id}/activate:
 *   put:
 *     summary: K√≠ch ho·∫°t l·∫°i ng∆∞·ªùi d√πng
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: K√≠ch ho·∫°t th√†nh c√¥ng
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.put("/:id/activate", asyncHandler(userController.activateUser));

/**
 * @swagger
 * /users/{id}/change-password:
 *   put:
 *     summary: ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
 *     tags:
 *       - Users
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               old_password:
 *                 type: string
 *               new_password:
 *                 type: string
 *     responses:
 *       200:
 *         description: ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng
 *       400:
 *         description: M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng
 *       403:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
 */
router.put("/:id/change-password", asyncHandler(userController.changePassword));

// Error handling middleware
router.use((err, req, res, next) => {
  console.error("‚ùå L·ªói trong user routes:", err);
  res.status(500).json({
    success: false,
    message: "L·ªói server trong qu·∫£n l√Ω ng∆∞·ªùi d√πng",
    error: err.message
  });
});

module.exports = router;