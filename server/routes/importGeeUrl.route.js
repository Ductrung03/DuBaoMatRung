// S·ª≠a file: server/routes/importGeeUrl.route.js

require("dotenv").config();
const express = require("express");
const router = express.Router();
const axios = require("axios");
const fs = require("fs");
const AdmZip = require("adm-zip");
const util = require("util");
const exec = util.promisify(require("child_process").exec);
const path = require("path");
const { Pool } = require("pg");
const pool = new Pool();
const authMiddleware = require("../middleware/auth.middleware");

// √Åp d·ª•ng middleware x√°c th·ª±c
router.use(authMiddleware.authenticate);

// S·ª¨A L·∫†I H√ÄM DOWNLOAD ZIP V·ªöI X·ª¨ L√ù L·ªñI T·ªêT H∆†N
async function downloadZip(zipUrl, savePath) {
  try {
    console.log(`üîç ƒêang ki·ªÉm tra URL: ${zipUrl}`);
    
    // Ki·ªÉm tra format URL
    if (!zipUrl.includes('earthengine.googleapis.com')) {
      throw new Error('URL kh√¥ng ph·∫£i t·ª´ Google Earth Engine. Vui l√≤ng ki·ªÉm tra l·∫°i URL.');
    }
    
    if (!zipUrl.includes(':getFeatures')) {
      throw new Error('URL kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. URL ph·∫£i ch·ª©a ":getFeatures" ·ªü cu·ªëi.');
    }
    
    console.log(`üì° ƒêang g·ª≠i request ƒë·∫øn Google Earth Engine...`);
    
    // C·∫•u h√¨nh request v·ªõi timeout v√† headers
    const response = await axios.get(zipUrl, {
      responseType: "arraybuffer",
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json, */*',
        'Accept-Encoding': 'gzip, deflate, br'
      },
      maxRedirects: 5,
      validateStatus: function (status) {
        // Ch·∫•p nh·∫≠n status code t·ª´ 200-299
        return status >= 200 && status < 300;
      }
    });
    
    // Ki·ªÉm tra response
    if (!response.data || response.data.byteLength === 0) {
      throw new Error('D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ Google Earth Engine r·ªóng.');
    }
    
    console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ GEE: ${response.data.byteLength} bytes`);
    
    // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ph·∫£i l√† ZIP kh√¥ng
    const isZip = response.data.slice(0, 4).toString('hex') === '504b0304';
    if (!isZip) {
      // C√≥ th·ªÉ l√† GeoJSON ho·∫∑c d·ªØ li·ªáu kh√°c
      console.log('üìÑ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c kh√¥ng ph·∫£i ZIP, c√≥ th·ªÉ l√† GeoJSON');
      
      // Th·ª≠ parse JSON
      try {
        const jsonData = new TextDecoder().decode(response.data);
        const parsed = JSON.parse(jsonData);
        
        if (parsed.error) {
          throw new Error(`L·ªói t·ª´ Google Earth Engine: ${parsed.error.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
        }
        
        // N·∫øu l√† GeoJSON h·ª£p l·ªá, l∆∞u th√†nh file JSON
        fs.writeFileSync(savePath.replace('.zip', '.geojson'), jsonData);
        console.log("‚úÖ T·∫£i GeoJSON th√†nh c√¥ng t·ª´ GEE.");
        return { isGeoJSON: true, data: parsed };
      } catch (parseError) {
        console.error('‚ùå Kh√¥ng th·ªÉ parse d·ªØ li·ªáu:', parseError.message);
        throw new Error('D·ªØ li·ªáu t·ª´ Google Earth Engine kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.');
      }
    }
    
    // L∆∞u file ZIP
    fs.writeFileSync(savePath, response.data);
    console.log("‚úÖ T·∫£i ZIP th√†nh c√¥ng t·ª´ GEE.");
    return { isGeoJSON: false };
    
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Earth Engine:", error.message);
    
    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
    if (error.response) {
      const status = error.response.status;
      const statusText = error.response.statusText;
      
      switch (status) {
        case 400:
          throw new Error(`L·ªói 400: URL kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tham s·ªë. Vui l√≤ng ki·ªÉm tra l·∫°i URL t·ª´ Google Earth Engine.`);
        case 401:
          throw new Error(`L·ªói 401: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. URL c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n ho·∫∑c c·∫ßn ƒëƒÉng nh·∫≠p Google Earth Engine.`);
        case 403:
          throw new Error(`L·ªói 403: B·ªã t·ª´ ch·ªëi truy c·∫≠p. Ki·ªÉm tra quy·ªÅn chia s·∫ª c·ªßa d·ªØ li·ªáu tr√™n Google Earth Engine.`);
        case 404:
          throw new Error(`L·ªói 404: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. URL c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.`);
        case 429:
          throw new Error(`L·ªói 429: Qu√° nhi·ªÅu request. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.`);
        case 500:
          throw new Error(`L·ªói 500: L·ªói server Google Earth Engine. Vui l√≤ng th·ª≠ l·∫°i sau.`);
        default:
          throw new Error(`L·ªói ${status}: ${statusText}. Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Google Earth Engine.`);
      }
    } else if (error.code === 'ECONNABORTED') {
      throw new Error('H·∫øt th·ªùi gian ch·ªù k·∫øt n·ªëi. URL c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c m·∫°ng ch·∫≠m.');
    } else if (error.code === 'ENOTFOUND') {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google Earth Engine. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    } else {
      throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}`);
    }
  }
}

// H√†m ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i (gi·ªØ nguy√™n)
async function checkDataExists(geoJsonData) {
  try {
    if (!geoJsonData || !geoJsonData.features || geoJsonData.features.length === 0) {
      return false;
    }

    const samplesToCheck = Math.min(5, geoJsonData.features.length);
    let existingCount = 0;

    for (let i = 0; i < samplesToCheck; i++) {
      const feature = geoJsonData.features[i];
      const props = feature.properties;
      
      const query = `
        SELECT COUNT(*) 
        FROM mat_rung 
        WHERE start_dau = $1 
          AND end_sau = $2 
          AND mahuyen = $3
      `;
      
      const params = [
        props.start_dau,
        props.end_sau,
        props.mahuyen
      ];
      
      const result = await pool.query(query, params);
      if (result.rows[0].count > 0) {
        existingCount++;
      }
    }

    return (existingCount / samplesToCheck) > 0.7;
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu t·ªìn t·∫°i:", err);
    return false;
  }
}

// S·ª¨A L·∫†I ROUTE CH√çNH
router.post("/", async (req, res) => {
  const { zipUrl } = req.body;
  const tmpDir = path.join(__dirname, "../tmp");
  const zipPath = path.join(tmpDir, "shapefile.zip");
  const extractPath = path.join(tmpDir, "unzip");
  const sqlPath = path.join(tmpDir, "import.sql");
  const modifiedSqlPath = path.join(tmpDir, "import_modified.sql");
  const geoJsonPath = path.join(tmpDir, "data.geojson");

  try {
    // Ki·ªÉm tra URL ƒë·∫ßu v√†o
    if (!zipUrl) {
      return res.status(400).json({
        message: "‚ùå Vui l√≤ng cung c·∫•p URL t·ª´ Google Earth Engine.",
        success: false
      });
    }

    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir, { recursive: true });

    console.log("‚¨áÔ∏è T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Google Earth Engine...");
    
    // T·∫£i d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói c·∫£i thi·ªán
    const downloadResult = await downloadZip(zipUrl, zipPath);
    
    let geoJsonData;
    
    if (downloadResult.isGeoJSON) {
      // N·∫øu l√† GeoJSON tr·ª±c ti·∫øp
      geoJsonData = downloadResult.data;
      console.log(`üìä Nh·∫≠n ƒë∆∞·ª£c GeoJSON v·ªõi ${geoJsonData.features?.length || 0} features`);
    } else {
      // N·∫øu l√† ZIP, gi·∫£i n√©n v√† x·ª≠ l√Ω
      console.log("üì¶ Gi·∫£i n√©n file ZIP...");
      const zip = new AdmZip(zipPath);
      zip.extractAllTo(extractPath, true);

      const shpFile = fs.readdirSync(extractPath).find((f) => f.endsWith(".shp"));
      if (!shpFile) {
        throw new Error("Kh√¥ng t√¨m th·∫•y file SHP trong ZIP. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu t·ª´ Google Earth Engine.");
      }
      
      const fullShpPath = path.join(extractPath, shpFile);
      console.log(`üìä File shapefile ƒë∆∞·ª£c t√¨m th·∫•y: ${shpFile}`);

      // Chuy·ªÉn shapefile sang GeoJSON
      console.log("üîç Chuy·ªÉn ƒë·ªïi shapefile sang GeoJSON...");
      const ogrCmd = `ogr2ogr -f "GeoJSON" "${geoJsonPath}" "${fullShpPath}"`;
      await exec(ogrCmd);
      
      geoJsonData = JSON.parse(fs.readFileSync(geoJsonPath, 'utf8'));
      console.log(`üìä S·ªë features trong GeoJSON: ${geoJsonData.features?.length || 0}`);
    }

    // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
    if (!geoJsonData || !geoJsonData.features || geoJsonData.features.length === 0) {
      throw new Error("D·ªØ li·ªáu t·ª´ Google Earth Engine r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá.");
    }

    // Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
    const dataExists = await checkDataExists(geoJsonData);
    if (dataExists) {
      console.log("‚ö†Ô∏è D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu!");
      
      // D·ªçn d·∫πp file t·∫°m
      try {
        if (fs.existsSync(zipPath)) fs.unlinkSync(zipPath);
        if (fs.existsSync(geoJsonPath)) fs.unlinkSync(geoJsonPath);
        if (fs.existsSync(extractPath)) fs.rmSync(extractPath, { recursive: true });
      } catch (cleanupErr) {
        console.error("‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp file t·∫°m:", cleanupErr);
      }
      
      return res.json({
        message: "‚ö†Ô∏è D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu!",
        alreadyExists: true,
        table: "mat_rung",
        recordsAdded: 0,
        success: true
      });
    }

    // ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi hi·ªán t·∫°i
    const countBefore = await pool.query("SELECT COUNT(*) FROM mat_rung");
    console.log(`üìä S·ªë b·∫£n ghi hi·ªán t·∫°i trong b·∫£ng mat_rung: ${countBefore.rows[0].count}`);

    // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a trigger
    console.log("üîß T·∫°m th·ªùi v√¥ hi·ªáu h√≥a trigger...");
    await pool.query(`ALTER TABLE mat_rung DISABLE TRIGGER set_area_in_hectares`);
    
    // Import d·ªØ li·ªáu tr·ª±c ti·∫øp qua node-postgres
    console.log("üîç Import d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu...");
    const client = await pool.connect();
    
    try {
      await client.query('BEGIN');
      
      let importedCount = 0;
      for (const feature of geoJsonData.features) {
        const props = feature.properties;
        const geom = feature.geometry;
        
        // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
        if (!props.start_dau || !props.end_sau) {
          console.log(`‚ö†Ô∏è B·ªè qua feature thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc:`, props);
          continue;
        }
        
        const sql = `
          INSERT INTO mat_rung (start_sau, area, start_dau, end_sau, mahuyen, end_dau, geom) 
          VALUES ($1, $2, $3, $4, $5, $6, ST_GeomFromGeoJSON($7))
        `;
        
        const params = [
          props.start_sau,
          props.area,
          props.start_dau,
          props.end_sau,
          props.mahuyen,
          props.end_dau,
          JSON.stringify(geom)
        ];
        
        await client.query(sql, params);
        importedCount++;
      }
      
      await client.query('COMMIT');
      console.log(`‚úÖ Import th√†nh c√¥ng ${importedCount} features.`);
      
    } catch (err) {
      await client.query('ROLLBACK');
      console.error("‚ùå L·ªói khi import:", err);
      throw err;
    } finally {
      client.release();
    }
    
    // B·∫≠t l·∫°i trigger
    console.log("üîß B·∫≠t l·∫°i trigger...");
    await pool.query(`ALTER TABLE mat_rung ENABLE TRIGGER set_area_in_hectares`);
    
    // ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi sau khi import
    const countAfter = await pool.query("SELECT COUNT(*) FROM mat_rung");
    const recordsAdded = countAfter.rows[0].count - countBefore.rows[0].count;
    console.log(`üìä S·ªë b·∫£n ghi ƒë√£ th√™m m·ªõi: ${recordsAdded}`);
    
    // L·∫•y d·ªØ li·ªáu GeoJSON ƒë·ªÉ hi·ªÉn th·ªã
    const geojsonQuery = `
      SELECT json_build_object(
        'type', 'FeatureCollection',
        'features', COALESCE(json_agg(
          json_build_object(
            'type', 'Feature',
            'geometry', ST_AsGeoJSON(geom)::json,
            'properties', to_jsonb(t) - 'geom'
          )
        ), '[]'::json)
      ) AS geojson
      FROM (
        SELECT * FROM mat_rung 
        ORDER BY gid DESC 
        LIMIT 1000
      ) AS t;
    `;
    
    const result = await pool.query(geojsonQuery);
    const geojson = result.rows[0].geojson;

    // D·ªçn d·∫πp file t·∫°m
    try {
      if (fs.existsSync(zipPath)) fs.unlinkSync(zipPath);
      if (fs.existsSync(sqlPath)) fs.unlinkSync(sqlPath);
      if (fs.existsSync(modifiedSqlPath)) fs.unlinkSync(modifiedSqlPath);
      if (fs.existsSync(geoJsonPath)) fs.unlinkSync(geoJsonPath);
      if (fs.existsSync(extractPath)) fs.rmSync(extractPath, { recursive: true });
    } catch (cleanupErr) {
      console.error("‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp file t·∫°m:", cleanupErr);
    }

    res.json({
      message: "‚úÖ T·∫£i v√† import d·ªØ li·ªáu t·ª´ Google Earth Engine th√†nh c√¥ng!",
      table: "mat_rung",
      recordsAdded: recordsAdded,
      geojson,
      success: true
    });
    
  } catch (err) {
    console.error("‚ùå L·ªói t·ªïng qu√°t:", err);
    
    // B·∫≠t l·∫°i trigger n·∫øu ƒë√£ v√¥ hi·ªáu h√≥a
    try {
      await pool.query(`ALTER TABLE mat_rung ENABLE TRIGGER set_area_in_hectares`);
    } catch (triggerErr) {
      console.error("‚ö†Ô∏è L·ªói khi b·∫≠t l·∫°i trigger:", triggerErr);
    }
    
    // D·ªçn d·∫πp files n·∫øu c√≥ l·ªói
    try {
      if (fs.existsSync(zipPath)) fs.unlinkSync(zipPath);
      if (fs.existsSync(sqlPath)) fs.unlinkSync(sqlPath);
      if (fs.existsSync(modifiedSqlPath)) fs.unlinkSync(modifiedSqlPath);
      if (fs.existsSync(geoJsonPath)) fs.unlinkSync(geoJsonPath);
      if (fs.existsSync(extractPath)) fs.rmSync(extractPath, { recursive: true });
    } catch (cleanupErr) {
      console.error("‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp file t·∫°m:", cleanupErr);
    }
    
    // Tr·∫£ v·ªÅ l·ªói v·ªõi th√¥ng b√°o r√µ r√†ng
    res.status(500).json({ 
      message: err.message || "C√≥ l·ªói x·∫£y ra khi import d·ªØ li·ªáu",
      success: false,
      error: err.message
    });
  }
});

module.exports = router;