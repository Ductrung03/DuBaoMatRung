/**
 * @swagger
 * /api/import-gee-url:
 *   post:
 *     tags:
 *       - Shapefile
 *     summary: Nh·∫≠p d·ªØ li·ªáu t·ª´ Google Earth Engine URL v√† x·ª≠ l√Ω
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               zipUrl:
 *                 type: string
 *               districtCode:
 *                 type: string
 *                 description: "M√£ huy·ªán ch√≠nh x√°c (v√≠ d·ª•: 85)"
 *     responses:
 *       200:
 *         description: Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng
 */

require("dotenv").config();
const express = require("express");
const router = express.Router();
const axios = require("axios");
const fs = require("fs");
const AdmZip = require("adm-zip");
const util = require("util");
const exec = util.promisify(require("child_process").exec);
const path = require("path");
const { Pool } = require("pg");
const pool = new Pool();
const authMiddleware = require("../middleware/auth.middleware");

// √Åp d·ª•ng middleware x√°c th·ª±c
router.use(authMiddleware.authenticate);

async function downloadZip(zipUrl, savePath) {
  const response = await axios.get(zipUrl, {
    responseType: "arraybuffer",
  });
  fs.writeFileSync(savePath, response.data);
  console.log("‚úÖ T·∫£i ZIP th√†nh c√¥ng t·ª´ GEE.");
}

router.post("/", async (req, res) => {
  const { zipUrl, districtCode } = req.body;
  const correctDistrictCode = districtCode || "85"; // M·∫∑c ƒë·ªãnh l√† "85" n·∫øu kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
  const tmpDir = path.join(__dirname, "../tmp");
  const zipPath = path.join(tmpDir, "shapefile.zip");
  const extractPath = path.join(tmpDir, "unzip");
  const sqlPath = path.join(tmpDir, "import.sql");

  try {
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir, { recursive: true });

    console.log(`üîç S·ª≠ d·ª•ng m√£ huy·ªán: ${correctDistrictCode}`);
    console.log("‚¨áÔ∏è T·∫£i v√† gi·∫£i n√©n shapefile...");
    await downloadZip(zipUrl, zipPath);
    const zip = new AdmZip(zipPath);
    zip.extractAllTo(extractPath, true);

    const shpFile = fs.readdirSync(extractPath).find((f) => f.endsWith(".shp"));
    if (!shpFile) throw new Error("Kh√¥ng t√¨m th·∫•y file SHP.");
    const fullShpPath = path.join(extractPath, shpFile);

    // Ki·ªÉm tra xem b·∫£ng mat_rung c√≥ t·ªìn t·∫°i kh√¥ng
    const checkExist = await pool.query(
      `
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'mat_rung'
      );
    `
    );

    const tableExists = checkExist.rows[0].exists;
    
    if (!tableExists) {
      throw new Error("B·∫£ng mat_rung kh√¥ng t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu.");
    }

    // T·∫°o file SQL t·ª´ shapefile
    const createSqlCmd = `shp2pgsql -a -s 4326 "${fullShpPath}" mat_rung > "${sqlPath}"`;
    console.log("üìù T·∫°o file SQL t·ª´ shapefile...");
    await exec(createSqlCmd);
    
    // ƒê·ªçc v√† s·ª≠a ƒë·ªïi file SQL
    console.log("‚úèÔ∏è S·ª≠a ƒë·ªïi file SQL ƒë·ªÉ c·∫≠p nh·∫≠t m√£ huy·ªán...");
    let sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // Thay th·∫ø t·∫•t c·∫£ c√°c m√£ huy·ªán '80' th√†nh m√£ huy·ªán ch√≠nh x√°c
    const originalSqlLength = sqlContent.length;
    sqlContent = sqlContent.replace(/'80'(?=\s*,|\s*\))/g, `'${correctDistrictCode}'`);
    const newSqlLength = sqlContent.length;
    
    const replacementCount = (originalSqlLength - newSqlLength) / 2; // 2 k√Ω t·ª± thay ƒë·ªïi m·ªói l·∫ßn thay th·∫ø
    console.log(`üîÑ ƒê√£ thay th·∫ø ${Math.abs(replacementCount) > 0 ? Math.abs(replacementCount) : 'kh√¥ng c√≥'} m√£ huy·ªán '80' th√†nh '${correctDistrictCode}'`);
    
    // L∆∞u SQL ƒë√£ s·ª≠a
    fs.writeFileSync(sqlPath, sqlContent);
    
    // Import d·ªØ li·ªáu v√†o PostgreSQL
    const importCmd = `
PGPASSWORD=${process.env.PGPASSWORD} psql "host=${process.env.PGHOST} port=${process.env.PGPORT} dbname=${process.env.PGDATABASE} user=${process.env.PGUSER}" -f "${sqlPath}"
`;
    console.log("üì• Import d·ªØ li·ªáu v√†o b·∫£ng mat_rung...");
    await exec(importCmd);
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c b·∫£n ghi m·ªõi ƒë·ªÅu c√≥ m√£ huy·ªán ch√≠nh x√°c
    // S·ª≠a l·∫°i c√∫ ph√°p SQL - kh√¥ng th·ªÉ d√πng ORDER BY v√† LIMIT tr·ª±c ti·∫øp trong UPDATE
    console.log("üîÑ C·∫≠p nh·∫≠t m√£ huy·ªán cho c√°c b·∫£n ghi m·ªõi nh·∫•t...");
    await pool.query(`
      UPDATE mat_rung 
      SET mahuyen = '${correctDistrictCode}' 
      WHERE mahuyen = '80' OR mahuyen IS NULL
    `);

    console.log("‚úÖ Import th√†nh c√¥ng!");

    // L·∫•y d·ªØ li·ªáu GeoJSON ƒë·ªÉ hi·ªÉn th·ªã
    let geojsonQuery = `
      SELECT json_build_object(
        'type', 'FeatureCollection',
        'features', json_agg(
          json_build_object(
            'type', 'Feature',
            'geometry', ST_AsGeoJSON(geom)::json,
            'properties', to_jsonb(t) - 'geom'
          )
        )
      )
      FROM (
        SELECT * FROM mat_rung 
        ORDER BY gid DESC 
        LIMIT 1000
      ) AS t;
    `;
    
    const result = await pool.query(geojsonQuery);
    const geojson = result.rows[0].json_build_object;

    // D·ªçn d·∫πp file t·∫°m
    fs.unlinkSync(zipPath);
    fs.unlinkSync(sqlPath);
    fs.rmSync(extractPath, { recursive: true });

    res.json({
      message: "‚úÖ T·∫£i v√† import v√†o PostgreSQL th√†nh c√¥ng!",
      table: "mat_rung",
      districtCode: correctDistrictCode,
      geojson,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·ªïng qu√°t:", err);
    res.status(500).json({ message: err.message });
    
    // D·ªçn d·∫πp files n·∫øu c√≥ l·ªói
    if (fs.existsSync(zipPath)) fs.unlinkSync(zipPath);
    if (fs.existsSync(sqlPath)) fs.unlinkSync(sqlPath);
    if (fs.existsSync(extractPath)) fs.rmSync(extractPath, { recursive: true });
  }
});

module.exports = router;