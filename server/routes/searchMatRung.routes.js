// server/routes/searchMatRung.routes.js - FIXED VERSION
const express = require("express");
const router = express.Router();
const searchController = require("../controllers/searchMatRung.controller");
const authMiddleware = require("../middleware/auth.middleware");

// ‚úÖ Middleware ƒë·ªÉ b·∫Øt l·ªói async
const asyncHandler = fn => (req, res, next) =>
  Promise.resolve(fn(req, res, next)).catch(next);

// ‚úÖ Log middleware ƒë·ªÉ debug
router.use((req, res, next) => {
  console.log(`üîç Search API: ${req.method} ${req.url}`);
  console.log(`üîë Authorization: ${req.headers.authorization ? 'C√≥ token' : 'Kh√¥ng c√≥ token'}`);
  next();
});

// ‚úÖ Authentication middleware cho t·∫•t c·∫£ routes
router.use(authMiddleware.authenticate);

/**
 * @swagger
 * components:
 *   schemas:
 *     SearchResult:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *         message:
 *           type: string
 *         data:
 *           type: object
 *           properties:
 *             target_feature:
 *               type: object
 *               description: Feature ch√≠nh ƒë∆∞·ª£c t√¨m ki·∫øm
 *             geojson:
 *               type: object
 *               description: GeoJSON ch·ª©a target v√† surrounding features
 *             center:
 *               type: array
 *               items:
 *                 type: number
 *               description: T·ªça ƒë·ªô trung t√¢m [longitude, latitude]
 *             bbox:
 *               type: array
 *               items:
 *                 type: number
 *               description: Bounding box [west, south, east, north]
 *             total_features:
 *               type: integer
 *             surrounding_count:
 *               type: integer
 *             search_radius_meters:
 *               type: integer
 *             target_gid:
 *               type: integer
 */

/**
 * @swagger
 * /search/mat-rung/{gid}:
 *   get:
 *     summary: T√¨m ki·∫øm l√¥ CB trong CSDL v√† load d·ªØ li·ªáu xung quanh
 *     description: |
 *       T√¨m ki·∫øm m·ªôt l√¥ CB theo GID v√† l·∫•y c√°c l√¥ CB xung quanh trong b√°n k√≠nh cho tr∆∞·ªõc.
 *       K·∫øt qu·∫£ bao g·ªìm GeoJSON data ƒë·ªÉ hi·ªÉn th·ªã tr√™n b·∫£n ƒë·ªì v√† th√¥ng tin ƒë·ªÉ zoom.
 *     tags:
 *       - Search Mat Rung
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: gid
 *         required: true
 *         schema:
 *           type: integer
 *           example: 4899
 *         description: ID c·ªßa l√¥ CB c·∫ßn t√¨m (VD CB-4899 th√¨ gid=4899)
 *       - in: query
 *         name: radius
 *         schema:
 *           type: integer
 *           default: 5000
 *           minimum: 1000
 *           maximum: 50000
 *         description: B√°n k√≠nh t√¨m ki·∫øm xung quanh (m√©t)
 *         example: 5000
 *     responses:
 *       200:
 *         description: T√¨m th·∫•y l√¥ CB v√† d·ªØ li·ªáu xung quanh th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SearchResult'
 *       400:
 *         description: Thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá GID
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Vui l√≤ng cung c·∫•p m√£ l√¥ CB (gid)"
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l√¥ CB v·ªõi GID ƒë√£ cho
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 message:
 *                   type: string
 *                   example: "Kh√¥ng t√¨m th·∫•y l√¥ CB-4899 trong c∆° s·ªü d·ªØ li·ªáu"
 *       401:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p (token invalid)
 *       500:
 *         description: L·ªói server
 */
router.get("/mat-rung/:gid", asyncHandler(searchController.searchMatRungById));

/**
 * @swagger
 * /search/mat-rung/{gid}/detail:
 *   get:
 *     summary: L·∫•y th√¥ng tin chi ti·∫øt m·ªôt l√¥ CB
 *     description: |
 *       L·∫•y th√¥ng tin chi ti·∫øt ƒë·∫ßy ƒë·ªß c·ªßa m·ªôt l√¥ CB bao g·ªìm:
 *       - Th√¥ng tin c∆° b·∫£n (di·ªán t√≠ch, th·ªùi gian, m√£ huy·ªán)
 *       - Th√¥ng tin h√†nh ch√≠nh (huy·ªán, x√£, ti·ªÉu khu, kho·∫£nh)
 *       - Tr·∫°ng th√°i v√† th√¥ng tin x√°c minh
 *       - T·ªça ƒë·ªô centroid
 *     tags:
 *       - Search Mat Rung
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: gid
 *         required: true
 *         schema:
 *           type: integer
 *           example: 4899
 *         description: ID c·ªßa l√¥ CB c·∫ßn l·∫•y chi ti·∫øt
 *     responses:
 *       200:
 *         description: L·∫•y chi ti·∫øt th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     gid:
 *                       type: integer
 *                       example: 4899
 *                     area:
 *                       type: number
 *                       description: Di·ªán t√≠ch t√≠nh b·∫±ng m¬≤
 *                       example: 15000
 *                     area_ha:
 *                       type: string
 *                       description: Di·ªán t√≠ch t√≠nh b·∫±ng hectare
 *                       example: "1.50"
 *                     start_dau:
 *                       type: string
 *                       format: date
 *                       example: "2024-01-15"
 *                     end_sau:
 *                       type: string
 *                       format: date
 *                       example: "2024-01-20"
 *                     detection_status:
 *                       type: string
 *                       example: "Ch∆∞a x√°c minh"
 *                     huyen:
 *                       type: string
 *                       example: "B√°t X√°t"
 *                     xa:
 *                       type: string
 *                       example: "Y T√Ω"
 *                     x_coordinate:
 *                       type: number
 *                       example: 103.45678
 *                     y_coordinate:
 *                       type: number
 *                       example: 22.12345
 *       400:
 *         description: Thi·∫øu GID
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y l√¥ CB
 *       401:
 *         description: Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
 *       500:
 *         description: L·ªói server
 */
router.get("/mat-rung/:gid/detail", asyncHandler(searchController.getMatRungDetail));

// ‚úÖ Error handling middleware
router.use((err, req, res, next) => {
  console.error("‚ùå L·ªói trong search routes:", err);
  
  // Log chi ti·∫øt h∆°n cho debugging
  console.error("Stack trace:", err.stack);
  console.error("Request info:", {
    method: req.method,
    url: req.url,
    params: req.params,
    query: req.query,
    user: req.user?.username || 'anonymous'
  });
  
  res.status(err.status || 500).json({
    success: false,
    message: process.env.NODE_ENV === 'development' 
      ? `L·ªói server trong t√¨m ki·∫øm: ${err.message}`
      : "L·ªói server trong t√¨m ki·∫øm",
    error: process.env.NODE_ENV === 'development' ? {
      message: err.message,
      stack: err.stack.split('\n').slice(0, 5) // Ch·ªâ l·∫•y 5 d√≤ng ƒë·∫ßu c·ªßa stack trace
    } : undefined,
    timestamp: new Date().toISOString()
  });
});

module.exports = router;