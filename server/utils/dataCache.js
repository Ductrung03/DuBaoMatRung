// server/utils/dataCache.js - H·ªá th·ªëng cache d·ªØ li·ªáu
class DataCache {
  constructor() {
    this.cache = new Map();
    this.cacheTimestamps = new Map();
    this.CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 gi·ªù
  }

  // Ki·ªÉm tra cache c√≥ h·ª£p l·ªá kh√¥ng
  isValidCache(key) {
    if (!this.cache.has(key)) return false;
    
    const timestamp = this.cacheTimestamps.get(key);
    const now = Date.now();
    
    return (now - timestamp) < this.CACHE_DURATION;
  }

  // L·∫•y d·ªØ li·ªáu t·ª´ cache
  get(key) {
    if (this.isValidCache(key)) {
      console.log(`‚úÖ Cache HIT for: ${key}`);
      return this.cache.get(key);
    }
    console.log(`‚ùå Cache MISS for: ${key}`);
    return null;
  }

  // L∆∞u d·ªØ li·ªáu v√†o cache
  set(key, data) {
    this.cache.set(key, data);
    this.cacheTimestamps.set(key, Date.now());
    console.log(`üíæ Cached data for: ${key} (${this.getDataSize(data)})`);
  }

  // X√≥a cache
  delete(key) {
    this.cache.delete(key);
    this.cacheTimestamps.delete(key);
    console.log(`üóëÔ∏è Deleted cache for: ${key}`);
  }

  // X√≥a t·∫•t c·∫£ cache
  clear() {
    this.cache.clear();
    this.cacheTimestamps.clear();
    console.log(`üóëÔ∏è Cleared all cache`);
  }

  // L·∫•y th√¥ng tin cache
  getStats() {
    const stats = {};
    for (const [key, data] of this.cache.entries()) {
      stats[key] = {
        size: this.getDataSize(data),
        timestamp: this.cacheTimestamps.get(key),
        isValid: this.isValidCache(key)
      };
    }
    return stats;
  }

  // T√≠nh k√≠ch th∆∞·ªõc d·ªØ li·ªáu
  getDataSize(data) {
    const size = JSON.stringify(data).length;
    if (size > 1024 * 1024) {
      return `${(size / (1024 * 1024)).toFixed(1)} MB`;
    }
    return `${(size / 1024).toFixed(1)} KB`;
  }
}

// T·∫°o instance duy nh·∫•t
const dataCache = new DataCache();

module.exports = dataCache;